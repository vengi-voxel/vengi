{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to vengi","text":"<p>This is a collection of voxel tools. It includes a voxel editor with animation support and loading/saving into a lot of voxel volume formats. There are other tools like e.g. a thumbnailer for your filemanager and a command line tool to convert or modify between several voxel formats.</p> <p>Find out more about features and status updates on my mastodon profile.</p> <p>The project source code is located at github/vengi-voxel/vengi. We also provide linux, osx and windows binaries here.</p> <p>Join our discord server to get support or submit your feature requests or bugs.</p> <p>If you just came here to use a voxel editor or to convert your voxel models into an obj or ply file, you should just go to the download page and check out the documentation of the tool as given in the navigation bar.</p> <p>If you came here as a developer, make sure to check out the dependencies and set up your development environment. The build scripts are cmake based, so make sure to have it installed and generate the project files for your desired ide. After setting up everything, make sure to check out the compilation guide.</p>"},{"location":"#images","title":"Images","text":""},{"location":"#online-version","title":"Online version","text":"<p>voxedit</p>"},{"location":"Basics/","title":"Basics","text":""},{"location":"Basics/#build","title":"Build","text":"<p>See compilation and dependencies.</p>"},{"location":"Basics/#coordinate-system","title":"Coordinate system","text":"<p>We are using the default opengl right handed coordinate system with x going right, y going upwards and z point towards you.</p> <p>We are using column major matrices.</p> <p></p>"},{"location":"Basics/#unittests","title":"Unittests","text":"<p>If you are going to contribute, make sure that you are adding unittests, too. I won't make promises about not breaking anything if there aren't unittests that are telling me that I've broken something.</p> <p>To add a unittest, each module (<code>src/modules/XXX</code>) has a <code>tests/</code> subdirectory. The <code>CMakeLists.txt</code> in the module directory adds the source files from that folder.</p> <pre><code>set(TEST_SRCS\n  [...]\n)\ngtest_suite_begin(tests-${LIB} TEMPLATE ${ROOT_DIR}/src/modules/core/tests/main.cpp.in)\ngtest_suite_sources(tests-${LIB} ${TEST_SRCS})\ngtest_suite_deps(tests-${LIB} ${LIB})\ngtest_suite_end(tests-${LIB})\n</code></pre>"},{"location":"Basics/#coding-style","title":"Coding style","text":"<p>Rule of thumb - stick to the existing coding style - you can also use the <code>clang-format</code> settings to format your code. In general you should not include any whitespace or formatting changes if they don't belong to your code changes.</p> <p>If you do a formatting change, this should not be mixed with code changes - make a dedicated commit for the formatting.</p> <p>Avoid using the STL were possible - see Orthodox C++.</p>"},{"location":"Basics/#commit-messages","title":"Commit messages","text":"<p>Commit messages should match the usual git commit message guidelines. Keep the summary short - put an UPPERCASE prefix in front of it and try to explain why the change was made - not what you changed (because that is part of the commit diff already).</p> <p>The prefix is usually the module name. E.g. if you are changing code in <code>src/modules/voxelformat</code> the prefix would be <code>VOXELFORMAT</code>. A commit message could look like this:</p> <pre><code>VOXELFORMAT: summary\n\ndetail message line 1\ndetail message line 2\n</code></pre>"},{"location":"Basics/#modules","title":"Modules","text":"Name Description app Basic application classes command Bind c++ functionality to console commands commonlua Basic lua bindings and helper core String, collections and other foundation classes http Http download module image Image loading and writing io Stream and file handling math Based on glm memento The undo/redo states for a scene graph instance metric telegraf, influx and other metrics noise Different noise implementations palette Palette formats and helper render General renderer implementations and helpers scenegraph Scene graph and scene graph node implementation testcore Visual test helpers ui DearImgui based ui code util video Window and renderer module voxel The voxel engine code based on PolyVox voxelcollection Browse online and local voxel collections voxelfont TTF font to voxel voxelformat Several volume and mesh based file formats to load or generate voxels voxelgenerator LUA generator, space colonization, tree- and shape generators voxelpathtracer Path tracer voxelrender Voxel renderer voxelutil Pathfinding, raycasting, image and general util functions"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>A more detailed changelog can be found on github.</p> <p>Join our discord server.</p> <p>See the documentation for further details.</p> <p>Known issues.</p>"},{"location":"CHANGELOG/#030-2025-xx-xx","title":"0.3.0 (2025-XX-XX)","text":"<p>General:</p> <ul> <li>Allow to export <code>ply</code> vertex positions as integers when <code>voxformat_transform_mesh</code> is set to <code>false</code> and no scale is applied</li> <li>Fixed hollowing in some situations</li> <li>Fixed a few <code>vxl</code> (Tiberian sun) issues</li> <li>Added spritestack write support</li> <li>Load a few more world properties for the blip/cubzh base64 encoded world files</li> <li>Use own filesystem abstraction for gltf files</li> <li>Implemented missing easing functions</li> <li>Extended blockbench format support regarding external textures</li> <li>Allow to put rotations into the AceOfSpades <code>vxl</code> export (no scaling yet)</li> <li>Performance optimizations for stuff like rotate on axis</li> <li>Added support for loading the palette from animatoon files</li> </ul>"},{"location":"CHANGELOG/#021-2025-10-24","title":"0.2.1 (2025-10-24)","text":"<p>General:</p> <ul> <li>Minor bugfix release</li> </ul>"},{"location":"CHANGELOG/#020-2025-10-24","title":"0.2.0 (2025-10-24)","text":"<p>General:</p> <ul> <li>Added missing ascii <code>fbx</code> header for saving and support texture coordinates and thumbnails for loading</li> <li>Support <code>obj</code> point clouds</li> <li>Added cvars <code>voxformat_imagesliceoffsetaxis</code> and <code>voxformat_imagesliceoffset</code> to import spritestacks via Aseprite <code>asprite</code> files</li> <li>Fixed symlink handling on linux</li> <li>Reduced memory usage</li> <li>Optimized palette color mappings</li> <li>Added <code>meshoptimizer</code> simplification support for mesh imports (cvar <code>voxformat_mesh_simplify</code>)</li> <li>Improved split-by-objects for hollowed objects</li> <li>Bump <code>vengi</code> format version</li> <li>Improved a few error messages and added missing error handling to some parts</li> <li>Optimized voxelization (subdividing triangles)</li> <li>Added support for goxel <code>txt</code> file format</li> <li>Added support for the veloren server chunk <code>dat</code> files</li> <li>Allow to export all cvars as json</li> <li>Optimized loading vengi files</li> </ul> <p>VoxEdit:</p> <ul> <li>Allow to animate point and camera nodes, too</li> <li>Allow to follow an animated camera to fly through a scene</li> <li>Fixed <code>resetcamera</code> when transforms are applied in edit mode</li> <li>Shared voxel editing with client/server collaboration mode</li> <li>Enable undo/redo for big volumes</li> <li>Refactored scene rendering settings dialog</li> <li>Improved shadow rendering</li> <li>Support translations and lua scripts in the web version</li> <li>Implemented basic physics that allows you to walk through a scene</li> <li>Allow to move a node in the hierarchy but don't move it in the world</li> </ul> <p>VoxConvert:</p> <ul> <li>Transfer existing thumbnails between formats (if supported)</li> <li>Allow isometric console output of a scene</li> <li>A web version is available now, too</li> </ul> <p>Thumbnailer:</p> <ul> <li>Added isometric thumbnail support</li> <li>Allow to set sun parameters</li> </ul>"},{"location":"CHANGELOG/#010-2025-07-19","title":"0.1.0 (2025-07-19)","text":"<p>General:</p> <ul> <li>Fixed handling of invalid <code>jpeg</code> files</li> <li>Added new normal palette from slab6</li> <li>Reduced overall memory usage</li> <li>Improved format detection for the file dialog</li> <li>New lua script <code>shadow</code> to generate shadows for a scene</li> <li>General performance improvements</li> <li>Minecraft skin loading and saving</li> </ul> <p>VoxEdit:</p> <ul> <li>New single-non-contiguous voxel placing mode in the brushes</li> <li>Added new view modes for Minecraft skins and Ace Of Spades</li> </ul> <p>PalConvert:</p> <ul> <li>Allow to use the built-in as well as lospec palettes from the command line, too</li> </ul> <p>VoxConvert:</p> <ul> <li>Added <code>--image</code> to voxconvert to print the loaded scene to the colored text console (showcase)</li> <li>Thumbnails for formats that support them can now be generated and added to the files</li> </ul>"},{"location":"CHANGELOG/#0038-2025-06-01","title":"0.0.38 (2025-06-01)","text":"<p>General:</p> <ul> <li>Fixed an off-by-one bug in the marching cubes extractor</li> <li>Fixed outline rendering in scene mode</li> <li>Fixed <code>vxl</code> slab5 loading</li> <li>Support <code>binvox</code> version 2 and 3 (unofficial)</li> <li>Allow to save all three versions of <code>binvox</code> files (cvar <code>voxformat_binvoxversion</code>)</li> <li>Improved DirectStateAccess (DSA) support for OpenGL</li> <li>Quite a few performance improvements</li> <li>Support colors on apple and windows terminals, too</li> <li>Added lua binding for genland algorithm. See the new <code>g_algorithm.genland</code> function</li> <li>Allow to save scenes as heightmaps (<code>png</code>). See the new <code>voxformat_imagesavetype</code> cvar</li> <li>Added support for writing Luanti/Minecraft <code>mts</code> files</li> </ul> <p>VoxEdit:</p> <ul> <li>Fixed directory import on Windows systems</li> <li>Fixed missing ambient occlusion for the binary mesher mode</li> <li>Fixed bloom rendering artifacts</li> <li>Fixed material changes not being applied to the palette</li> </ul>"},{"location":"CHANGELOG/#0037-2025-05-12","title":"0.0.37 (2025-05-12)","text":"<p>General:</p> <ul> <li>Added new minecraft block to color mappings</li> <li>Improved bash completion scripts</li> <li>Fixed <code>vmax.zip</code> loading</li> <li>Improved VoxelMax scene loading</li> <li>Improved color mapping for minecraft blocks with prefixes</li> <li>Fixed some dpi issues with a few dialog sizes</li> <li>Added support for Avoyd material template (<code>avmt</code>) files</li> <li>Fixed new binary mesher for negative region offsets</li> <li>New lua scripts</li> <li>Added lua script description</li> </ul> <p>VoxEdit:</p> <ul> <li>Added new dialog to show the minecraft block to color mappings</li> <li>Extended palette function (white-balancing and constrast-stretching)</li> <li>Fixed showing a few keybinding hints</li> <li>Refactored the node inspector</li> <li>Improved the camera panel</li> <li>Allow to change the cvar <code>ve_regionsizes</code> from within the UI</li> <li>Fixed crash in memento panel tooltip handling</li> <li>Optimized lua script panel</li> </ul> <p>PalConvert:</p> <ul> <li>Print palette and color names</li> </ul>"},{"location":"CHANGELOG/#0036-2025-04-21","title":"0.0.36 (2025-04-21)","text":"<p>General:</p> <ul> <li>Fixed emit value handling for palettes</li> <li>Fixed <code>KHR_materials_pbrSpecularGlossiness</code> handling for <code>gltf</code> exports</li> <li>Added new lua script to create newel stairs</li> <li>Fixed missing animation transfer from one scenegraph into other one</li> <li>Updated/Added SDL3 support (both SDL2 and SDL3 are supported now)</li> <li>Added Adobe ColorBook (<code>acb</code>) palette support</li> <li>Fixed <code>xraw</code> palette issue with color slot 0</li> <li>Added <code>schematic</code> write support (Minecraft)</li> <li>Fixed Adobe Swatch Exchange (<code>ase</code>) palette loading issue</li> <li>Use a faster binary-greedy-mesher</li> <li>Optimizations</li> <li>Fixed node merging with pivots</li> <li>Allow to load other palette image dimensions than 1x256</li> </ul> <p>VoxEdit:</p> <ul> <li>Implemented selection invert</li> <li>Added palette options to file dialog</li> <li>Allow to execute palette actions on multiple colors</li> <li>Allow to reduce multiple colors at once</li> <li>Fixed missing font glyphs in some cases</li> </ul> <p>PalConvert:</p> <ul> <li>Added a new tool for dealing with palettes</li> </ul>"},{"location":"CHANGELOG/#0035-2025-02-09","title":"0.0.35 (2025-02-09)","text":"<p>General:</p> <ul> <li>Added support for BenVoxel <code>ben</code> and <code>ben.json</code> format</li> <li>Added support for loading vertex colors for <code>3ds</code></li> <li>New cvar to define additional texture search paths for voxelization (<code>voxformat_texturepath</code>)</li> <li>Fixed an error with loading magicavoxel files without layers</li> <li>New lua script to remap colors</li> <li>Prevent files from being opened twice (windows doesn't like this)</li> <li>Fixed unicode related errors on windows for path handling</li> <li>Fixed case-sensitivity in pattern matching. We couldn't find files that had upper-case extensions</li> <li>Implemented symlink handling on windows</li> <li>Added public domain Ace Of Spades map generator code</li> <li>Added new cvar <code>palformat_maxsize</code> to control the max image size for palette quantization</li> <li>Added new cvar <code>voxformat_imageheightmapminheight</code> to control the minimum size during a heightmap import</li> <li>Fixed handling of <code>gltf</code> embedded images</li> <li>Fixed <code>png</code> import palette handling</li> <li>Fixed issues with <code>thing</code> format</li> <li>Fixed issues with <code>vxl</code> format</li> <li>Added support for loading quake <code>map</code> files (but this is still work-in-progress)</li> <li>Added new blocks to <code>sment</code> StarMade palette</li> <li>Added new lua script <code>flatten</code></li> <li>Fixed issue with auto selecting files in the file dialog if the options popup is visible</li> <li>Added support for KenneyShape <code>kenshape</code> format</li> <li>Added save support for Godot <code>escn</code> scene format</li> </ul> <p>VoxConvert:</p> <ul> <li>Removed the file type selection for source and target files in the ui</li> <li>Added script support to the ui</li> <li><code>--usage</code> shows lua script details now</li> <li>Removed <code>--slice</code> (see <code>png</code> format)</li> <li>Allow to specify multiple <code>--script</code> parameters</li> </ul> <p>VoxEdit:</p> <ul> <li>Added the possibility to render a plane to the viewport for easier orientation</li> <li>Show the normals in scene mode, too</li> <li>Allow to edit models in-place in edit mode</li> </ul>"},{"location":"CHANGELOG/#0034-2024-11-14","title":"0.0.34 (2024-11-14)","text":"<p>General:</p> <ul> <li>Fixed invalid uv coordinate handling when importing meshes to voxelize them</li> <li>Added support for paint.net palettes</li> <li>Added support for Adobe Photoshop ACO palettes</li> <li>Added support for <code>bbmodel</code> Blockbench format</li> <li>Added support for <code>vxb</code> Sandbox Block format</li> <li>Fixed a few errors in the lua bindings of the <code>g_import</code> global</li> <li>Extended the lua api (<code>g_sys</code>, <code>g_io</code>)</li> <li>Fixed nameless, embedded textures in <code>glb</code></li> <li>Fixed off-by-one in <code>voxformat_voxelizemode</code> <code>1</code></li> <li>Fixed missing axis flip for <code>md2</code> scale and translate value imports</li> <li>Added support for Quake1 <code>mdl</code> files</li> <li>Added support for exporting and importing to and from <code>png</code> slices</li> <li>Added support for Autodesk <code>3ds</code> files</li> <li>Support for loading normals for voxelization (mesh formats) and for voxel formats (<code>vxl</code>)</li> <li>Fixed <code>vxl</code> saving for negative coordinates</li> <li>Split file dialog options into a new separated dialog</li> <li>Added new lua scripts (game of life, mandelbulb, smooth)</li> <li>Added support for Pixelorama palette</li> </ul> <p>VoxConvert:</p> <ul> <li>Removed <code>--image-as-XXX</code> parameters (now part of the <code>png</code> format)</li> <li>Removed <code>--colored-heightmap</code> (this is auto-detected in the <code>png</code> format now)</li> </ul> <p>VoxEdit:</p> <ul> <li>Allow to change the local directory for the asset panel</li> <li>Add more online sources to the asset panel</li> <li>Added support to apply a checkboard pattern to your voxels just for rendering</li> <li>Improved handling for max allowed voxels</li> <li>Disable undo/redo for model changes if you exceed a max suggested model size</li> <li>Disable autosaves for model changes if you exceed a max suggested model size</li> <li>New brush type to project textures into sub areas or on surfaces</li> <li>Added an FPS option for the animation timeline</li> <li>Added normal palette panel</li> <li>Fixed missing memento group for merging nodes</li> <li>Improved undo/redo for lua script changes on the scenegraph</li> <li>Added a slice mode to only show a particular height level of your volume</li> <li>Don't place invalid colored voxels in group lock mode</li> <li>Render forward direction in the viewport</li> </ul>"},{"location":"CHANGELOG/#0033-2024-08-05","title":"0.0.33 (2024-08-05)","text":"<p>General:</p> <ul> <li>Fixed invalid log levels</li> <li>Added a new node type for named points</li> <li>Improved <code>3zh</code> format support</li> <li>Added support for <code>ase</code> and <code>aseprite</code> format</li> <li>Added cvar <code>voxformat_emptypaletteindex</code></li> <li>Create walk and jump animations with the new <code>animate.lua</code> script</li> <li>New lua script and bindings (<code>imageasvolume.lua</code>) for importing 2d images with depth</li> <li>Added <code>v3b</code> format support (compressed <code>v3a</code> file)</li> <li>Translation improvements</li> <li>Fixed mesh extraction at chunk borders in some situations</li> <li>Added support for libjpeg to speed up save times (and thus avi creation times)</li> <li>Improved Windows file attribute handling</li> <li><code>writeString</code> lua stream binding has a new default value - check the docs</li> </ul> <p>VoxConvert:</p> <ul> <li>Added a basic UI for voxconvert</li> <li>Removed <code>--dump</code> and added <code>--json &lt;full&gt;</code> to generate a scene graph structure</li> </ul> <p>VoxBrowser:</p> <ul> <li>Removed standalone application - it's integrated in voxedit now</li> </ul> <p>VoxEdit:</p> <ul> <li>Improved brush support</li> <li>Fixed loading voxel collection assets</li> <li>Gradient paint brush mode</li> <li>Fixed invalid voxel erasing in plane brush</li> <li>Extrude with preview (plane brush)</li> <li>Fixed a few palette panel issues when re-ordering colors</li> <li>Improved the workflow to import a new palette</li> </ul>"},{"location":"CHANGELOG/#0032-2024-05-29","title":"0.0.32 (2024-05-29)","text":"<p>General:</p> <ul> <li>Add meshoptimizer support (new cvar <code>voxformat_optimize</code>)</li> <li>Fixed missing region shift for <code>vxl</code> (Command and Conquer)</li> <li>Fixed MagicaVoxel <code>vox</code> file loading for files that don't contain instances, but only models</li> <li>Added <code>vxc</code> thumbnail support</li> <li>Fixed a translation related crash for all apps on windows</li> </ul> <p>VoxEdit:</p> <ul> <li>Converted the text-voxel-rendering into a new brush</li> <li>Fixed undo node transform changes as first action</li> </ul>"},{"location":"CHANGELOG/#0031-2024-05-09","title":"0.0.31 (2024-05-09)","text":"<p>General:</p> <ul> <li>Fixed memory leak in <code>fbx</code> loading</li> <li>Added support for starmade templates <code>smtpl</code> format</li> <li>Fixed merging of nodes when pivots are used</li> <li>Added support for <code>litematic</code> Minecraft</li> <li>Extended supported Minecraft materials</li> <li>Extended lua bindings for key frames and transforms</li> <li>Extended lua bindings for http requests</li> <li>Fixed face culling for negative scale values</li> <li>Added command and cvar dialogs to the help menus</li> <li>Added cubzh v5 (older version) support (<code>3zh</code>)</li> <li>Added support for writing uncompressed qubicle <code>qb</code> files</li> <li>Fixed qubicle <code>qb</code> version number</li> <li>Added basic support for rooms.xyz <code>thing</code> file support</li> <li>Optimized file dialog for large directories</li> <li>Added translation support (<code>po</code> files)</li> <li>Fixed error in up-scaling volumes</li> <li>Fixed x-axis flip for cubzh <code>3zh</code> files</li> <li>Added cvar <code>voxformat_rgbweightedaverage</code> to control the color contributions for a triangle</li> <li>Added the ability to upload crash dumps</li> <li>Improved support for reference nodes in a lot of formats</li> <li>Improved pivot support in a lot of formats</li> </ul> <p>VoxConvert:</p> <ul> <li>Added zip archive support for <code>--input</code></li> <li>Added the ability to export into slices with <code>--slice</code> when <code>--output</code> is a png file</li> </ul> <p>VoxEdit:</p> <ul> <li>Added support for browsing the remote voxel collections to the asset panel</li> <li>Added <code>modelmerge all</code> parameter to merge all nodes at once</li> <li>Added <code>presentation</code> command to cycle through all models in a scene</li> <li>Improved position panel to edit transforms</li> <li>Improved start-up times</li> <li>Pasting from a different palette will search the closest colors</li> <li>Fixed off-by-one error in <code>ve_regionsizes</code> cvar handling</li> <li>Re-enabled the yocto-pathtracer panels again</li> <li>Moved some ui elements into other panels</li> <li>Improved stamp brush features</li> <li>Fixed brush regression in combination with the override mode</li> <li>Added pathfinder brush preview</li> </ul> <p>Thumbnailer:</p> <ul> <li>Fixed logic error in skipping camera nodes</li> </ul> <p>Packaging:</p> <ul> <li>Renamed AppStream package to <code>io.github.vengi_voxel.vengi.voxedit</code> for DBUS compatibility</li> </ul>"},{"location":"CHANGELOG/#0030-2024-03-23","title":"0.0.30 (2024-03-23)","text":"<p>General:</p> <ul> <li>Fixed material saving and loading for vengi format</li> <li>Fixed off-by-one in palette material property handling</li> <li>Fixed extrude on region boundaries</li> <li>Added dialogs to recover from previous crash by resetting all config values</li> </ul> <p>VoxBrowser:</p> <ul> <li>Optimizations for huge voxel collections</li> <li>Fixed some download url assembling errors for some online collections</li> </ul> <p>VoxEdit:</p> <ul> <li>Fixed segfault when activating simplified mode</li> <li>Fixed spanning AABB</li> <li>Fixed crash on deleting reference nodes after duplication</li> <li>Fixed pivot handling issue for reference nodes</li> <li>Spurious reference nodes were visible in edit mode</li> <li>Fixed a few memento state handling errors in terms of key frames and pivot points</li> <li>Fixed memento state handling errors for reference nodes</li> <li>Disable a few of the new panels in simple mode again</li> <li>Improved scene mode node selection</li> </ul>"},{"location":"CHANGELOG/#0029-2024-03-15","title":"0.0.29 (2024-03-15)","text":"<p>General:</p> <ul> <li>Expose <code>hollow()</code> to lua bindings</li> <li>Add lua sanity checker to the build pipelines</li> <li>Fixed randomness in lua script <code>similarcolor.lua</code></li> <li>Fixed error in voxelizer handling off-by-one cases in negative vertex coordinates</li> <li>Fixed <code>vxl/hva</code> loading and saving</li> <li>Fixed missing <code>pcubes</code> write support</li> <li>Support palette materials</li> <li>Optimized qubicle <code>QB</code> color quantization</li> <li>Import magicavoxel materials</li> <li>Improved <code>GLTF</code> material support</li> <li>Made the smooth normals for the cubic mesh extractor optional (<code>voxformat_withnormals</code>)</li> <li>Improved texture coordinates for mesh exports</li> <li>Improved bash completion script creation</li> <li>Improved scene camera centering</li> <li>Fixed Anima Toon (<code>scn</code>) volume loading support</li> <li>Palette optimizations</li> <li>Improved StarMade <code>sment</code>, <code>smd2</code> and <code>smd3</code> support</li> </ul> <p>VoxBrowser:</p> <ul> <li>New tool to browse voxel collections</li> </ul> <p>VoxConvert:</p> <ul> <li>Added <code>--print-formats</code> parameter to print all formats as json the ease the parsing for third party tools</li> <li>Support multiple <code>--output</code> parameters to write one (or more) input files into different formats in one step</li> </ul> <p>VoxEdit:</p> <ul> <li>Auto create key frames when transform is modified via gizmo, too</li> <li>Fixed an error in interpolating between the key frames</li> <li>Fixed an error while trying to remove unused colors from a re-sorted palette</li> <li>Fixed missing outline for dark voxels</li> <li>Update paint features</li> <li>Added more features to the palette panel (e.g. duplicating and removing colors)</li> <li>Allow to bind the left- and right-scrolling mouse wheel</li> <li>Improved draw color brush darken/brighten to create new colors if needed (and possible)</li> <li>Fixed voxel placing on using the camera view manipulator</li> <li>Fixed grid culling for orthographic projections</li> <li>Selection in ortho fixed side view spans the whole size of the volume</li> <li>Updated key bindings</li> <li>Added popup for renaming a node</li> <li>Fixed a few palette panel issues for sorting and re-ordering</li> <li>Improved grid rendering</li> <li>Added new models to the new-scene-dialog</li> </ul> <p>Thumbnailer:</p> <ul> <li>Don't render camera frustums for the thumbnails</li> <li>Allow to change the camera mode (top, left, right, ...)</li> </ul>"},{"location":"CHANGELOG/#0028-2024-01-17","title":"0.0.28 (2024-01-17)","text":"<p>moved the github project into an organization named vengi-voxel - the url changed to https://github.com/vengi-voxel/vengi.</p> <p>General:</p> <ul> <li>Improved SLAB5/6 support of <code>kvx</code>, <code>kv6</code>, <code>kfa</code> and <code>vox</code></li> <li>Don't fill the inner voxels of the SLAB5/6 models anymore</li> <li>Improved palette support for plane and volume import</li> <li>Fixed an error in de-duplicating Magicavoxel models</li> <li>Allow one to save/convert only visible nodes</li> <li><code>ply</code> format got support for converting polygons into triangles</li> <li>Show the full application name as window title</li> <li>Improved esc handling for menus and popups</li> <li>Added support for particube <code>pcubes</code> and <code>3zh</code> support</li> <li>Added support for Photoshop <code>ase</code> palette</li> <li>Added support for Paintshop Pro (JASC) <code>pal</code> palette</li> <li>Extended support for the Gimp <code>gpl</code> palette format to support the Aseprite alpha channel extension</li> <li>Added support to collect anonymous metrics (disabled by default)</li> <li>Added support to align all models in a scene - useful for rendering all models for an overview</li> <li>Extended lua bindings</li> <li>Added automatic bash and zsh completion generation for all apps. Just use e.g. <code>vengi-voxconvert --completion bash</code> (or <code>zsh</code>)</li> <li>Calculate normals for the cubic mesh extractor, too</li> <li>Added support for cubzh <code>b64</code> maps</li> <li>Fixed endian issue on big endian machines in <code>gltf</code> loading</li> <li>Fixed non-flipped uv coordinates for some <code>gltf</code> files</li> </ul> <p>VoxConvert:</p> <ul> <li>Improved <code>--export-models</code> to work with the output format given by <code>--output</code></li> <li>Added <code>--filter-property</code> to filter by node property <code>key&lt;:value&gt;</code></li> </ul> <p>VoxEdit:</p> <ul> <li>Added alternative split-object implementation and expose it to the editor tool panel</li> <li>Fixed split dialog appearing too late</li> <li>Added shader for marching cubes</li> <li>Fixed selection handling</li> <li>Added tip of the day dialog</li> <li>Resize to selection</li> <li>Fixed palette panel issue if you changed the order of colors</li> <li>Added more templates to the new-scene-dialog</li> <li>Made the new-scene-dialog scrollable</li> <li>Allow one to change the transform of a node with updating the children</li> <li>Fixed a few crashes</li> <li>Improved gizmo settings panel</li> <li>Added the console next to the animation timeline panel</li> <li>Improved color themes (especially the light theme)</li> <li>Only show the brush panel if in edit mode</li> <li>Converted the script brush back to a normal panel</li> <li>Automatically reference all child nodes when creating a new reference</li> <li>Allow one to switch between cubes and marching cubes rendering in the editor</li> <li>Added <code>clear</code> and <code>fill</code> commands</li> <li>Preview for the line brush</li> <li>Allow to render the bones</li> </ul> <p>Thumbnailer:</p> <ul> <li>Add a few more command line options to control the camera</li> </ul>"},{"location":"CHANGELOG/#0027-2023-09-19","title":"0.0.27 (2023-09-19)","text":"<p>Breaking changes:</p> <ul> <li>Renamed globals for lua scripts. Added a <code>g_</code> prefix to them. You have to adopt your scripts      to work with the latest version with vengi (if you use them):<ul> <li><code>scenegraph</code> is now <code>g_scenegraph</code></li> <li><code>palettemgr</code> is now <code>g_palette</code></li> <li><code>noise</code> is now <code>g_noise</code></li> <li><code>cmd</code> is now <code>g_cmd</code></li> <li><code>var</code> is now <code>g_var</code></li> <li><code>XvecX</code> is now <code>g_XvecX</code> (<code>ivec3</code> is for example <code>g_ivec3</code>)</li> </ul> </li> </ul> <p>General:</p> <ul> <li>Added cvar <code>voxformat_pointcloudsize</code> for point cloud formats</li> <li>Added Polygon File Format (<code>ply</code>) mesh and point cloud support (ascii and binary)</li> <li>Fixed regression with <code>GLTF</code> exports</li> <li>Added a new lua script to slice a node into smaller pieces</li> <li>Expose shape generators to lua</li> <li>Fixed color intensity handling for <code>kvx</code> files</li> <li>Added write support for <code>kvx</code> format (used in e.g. voxel doom and eduke3d)</li> <li>Added support for Voxel3D <code>v3a</code> format</li> </ul> <p>VoxEdit:</p> <ul> <li>Fixed regression about not rendering the shape volumes anymore</li> <li>Implemented scene graph panel drag and drop popup</li> <li>Added brush support and new editing features</li> <li>Fixed spurious crashes for windows</li> </ul>"},{"location":"CHANGELOG/#0026-2023-08-13","title":"0.0.26 (2023-08-13)","text":"<p>General:</p> <ul> <li>Fixed pivot handling in <code>VXR</code> format</li> <li>Allow one to export the <code>GLTF</code> vertex colors as byte values</li> <li>Added NeuQuant color quantization algorithm</li> <li>Optimized <code>GLTF</code> and <code>MD2</code> import</li> <li>Fixed Quake1 texture handling</li> <li>General optimizations</li> <li>Added a new voxelization algorithm and a cvar to use it (set <code>voxformat_voxelizemode</code> to 1)</li> <li>Fixed issues with importing images with a depth-map</li> <li>Fixed regression for reading minecraft voxel data</li> <li>Added support for loading Lospec palettes</li> </ul> <p>VoxEdit:</p> <ul> <li>Improved shape handling a lot</li> <li>Added (disabled) pathtracer support (Yocto/GL)</li> <li>Fixed rendering order of overlapping bounding boxes for the active node</li> <li>Added warning popup to split volumes into smaller pieces</li> </ul>"},{"location":"CHANGELOG/#0025-2023-07-28","title":"0.0.25 (2023-07-28)","text":"<p>General:</p> <ul> <li>Fixed invalid x axis handling for Sandbox <code>VXM</code> format</li> <li>Fixed pivot handling in <code>VXR</code>/<code>VXA</code> format</li> <li>Support model references to build a complex scene</li> <li>Extended <code>GLTF</code> support to animation import and export as well as normal export</li> <li>Fixed missing base color support for <code>GLTF</code></li> <li>Support for some parts of VoxelMax format</li> <li>Fixed Sandbox <code>VXA</code> v3 support</li> <li>Fixed volume rotation issues</li> <li>Fixed volume merging issues</li> <li>Added Quake2 Model (<code>md2</code>) support</li> <li>Removed cvar <code>voxformat_marchingcubes</code> and replaced with <code>voxel_meshmode</code> (set to <code>1</code> to use marching cubes)</li> <li>Added new lua script <code>gradient.lua</code></li> <li>Improved <code>csm</code> and <code>nvm</code> format support</li> <li>Added lua script for generating mazes</li> <li>Added the ability to easily scale a volume up</li> <li>Unified naming of commands and parameters (<code>layer</code> is <code>model</code> now, ...)</li> <li>Added VoxelBuilder (<code>vbx</code>) support</li> <li>Fixed missing group transform handling for MagicaVoxel <code>vox</code> files</li> <li>Added support for MagicaVoxel <code>xraw</code> format</li> <li>Added alpha support for MagicaVoxel materials</li> <li>Added support for loading Sandbox <code>VXM</code> v3</li> <li>Added new lua script and extended lua api to replace palettes, resize volumes and move voxels</li> </ul> <p>VoxConvert:</p> <ul> <li>Fixed <code>--input</code> handling if the value is a directory</li> <li>Added option <code>--wildcard</code> to specify a wildcard in cases where the <code>--input</code> value is a directory</li> <li>Added <code>--surface-only</code> parameter that removes any non surface voxel.</li> <li>Added <code>--dump-mesh</code> to also show mesh details (like vertex count).</li> </ul> <p>VoxEdit:</p> <ul> <li>Allow one to export selections only</li> <li>Started to support different keymaps (blender, qubicle, magicavoxel and vengi own)</li> <li>Added support for multiple animations in one scene</li> <li>Allow one to duplicate all scene graph nodes</li> <li>(Re-)implemented WASD controls in camera eye mode</li> <li>Fixed copy&amp;paste errors with multiple selections</li> <li>Updated new scene dialog to include the templates</li> <li>Improved font quality</li> <li>Fixed a few crashes</li> <li>Added hollow functionality to remove invisible voxels</li> <li>Preview of modifier shapes in edit mode</li> </ul> <p>Thumbnailer:</p> <ul> <li>Improved camera placement</li> <li>Fixed threading issue with the mesh extraction for the renderer that could lead to black thumbnails</li> <li>Don't render cameras for the thumbnails</li> </ul>"},{"location":"CHANGELOG/#0024-2023-03-12","title":"0.0.24 (2023-03-12)","text":"<p>General:</p> <ul> <li>Support using <code>palette</code> cvar as a destination palette again by setting <code>voxformat_createpalette</code> to <code>false</code></li> <li>Added new image formats from SOIL2 (<code>DDS</code>, <code>PKM</code>, <code>PVR</code>)</li> <li>Added <code>FBX</code> read support</li> <li>Improved texture lookup for mesh formats</li> <li>Added multiple color reduction algorithms and expose them to the user by the cvar <code>core_colorreduction</code></li> <li>Fixed several issues with AceOfSpades <code>vxl</code> format - switched to libvxl for loading and saving</li> <li>Fixed splitting volumes even if not needed (off-by-one error)</li> <li>Fixed multi-monitor support</li> <li>Fixed colors in the tree generator</li> <li>Improved the key binding handling and made it more flexible</li> <li>Added support for loading minetest <code>mts</code> files</li> <li>Fixed Command&amp;Conquer <code>vxl</code> format writing issue</li> <li>Added own format with the extension <code>vengi</code></li> <li>Added basic alpha support</li> <li>Fixed saving the keybindings with multi click</li> <li>Improved keybinding and ui setting saving (added a version)</li> <li>Fixed invalid transform on re-parenting a node</li> <li>Refactored the file dialog</li> <li>Fixed issue in saving MagicaVoxel <code>vox</code> files under some special conditions</li> <li>Implemented basic transparency support for voxels</li> <li>Fixed invalid clamping for uv based pixel lookup (mesh imports)</li> <li>Update renderer to only use uniform buffers</li> <li>Fixed rendering issue for windows users</li> <li>Fixed fullscreen issues for windows users</li> <li>Extended lua script bindings to Allow one to render text as voxels</li> <li>Support GLES3 rendering</li> </ul> <p>VoxConvert:</p> <ul> <li>Show supported palette and image formats in help screen (<code>--help</code>)</li> </ul> <p>VoxEdit:</p> <ul> <li>Disable animation window if there are no animations to show</li> <li>Allow one to show the color picker in the palette panel</li> <li>Reworked the modifiers panel</li> <li>Made undo/redo more visible</li> <li>Switched the camera modifier to the right side of the viewport</li> <li>Fixed diffuse and ambient color settings mix-up</li> <li>Merged layer and scene graph panel into one</li> <li>Several gizmo related fixes and improvements</li> <li>Added simple UI mode which removes some panels</li> <li>Fixed a few memento (undo/redo) related issues</li> <li>Added templates to the menu (<code>robo</code>, <code>chess</code>, <code>head</code> and <code>chr_knight</code>)</li> <li>Allow one to control the amount of viewports</li> <li>Allow one to define pre-defined region sizes (see <code>ve_regionsizes</code> cvar)</li> <li>Some ui actions are only available in edit mode</li> <li>Edit mode has support for the gizmo now - you can shift the volume boundaries</li> <li>Highlight copy&amp;paste volume region</li> <li>Visually disable some buttons if they won't work in the current mode anyway</li> <li>Don't execute actions for hidden nodes</li> <li>New keybindings</li> <li>Allow one to sort the palette colors by hue, saturation or brightness</li> <li>Allow one to select and drag keyframes in the animation timeline</li> <li>Export animations as <code>AVI</code></li> <li>Allow one to import a whole directory into a scene</li> <li>Allow one to select all node types in the scene graph panel</li> <li>Allow one to edit node properties</li> <li>Added voxel cursor tooltips about the position in the volume</li> <li>WASM/HTML5 port</li> </ul>"},{"location":"CHANGELOG/#0023-2022-12-17","title":"0.0.23 (2022-12-17)","text":"<p>General:</p> <ul> <li>Improved big endian support for voxel formats</li> <li>Improved <code>VXL</code> format default palette support</li> <li>Improved <code>QBCL</code> scene graph support</li> <li>Improved voxelization vertex color support</li> <li>Fixed <code>VOX</code> root node handling</li> <li>Fixed <code>QBCL</code> and <code>GOX</code> thumbnail handling</li> <li>Removed unused code</li> <li>Added support for <code>VXA</code> v3</li> <li>(Re-)added support for marching cubes</li> <li>Fixed a bug in Ace of Spades <code>VXL</code> loading</li> </ul> <p>VoxEdit:</p> <ul> <li>Added support for embedding screenshots in formats that support it</li> <li>Allow one to export palettes</li> <li>Allow one to change color intensity of the whole palette</li> <li>Allow one to voxelize text</li> <li>Fixed orthographic cameras</li> <li>Massive performance increase when using multiple viewports</li> <li>More than 10 times gpu memory reduction</li> <li>Render the camera nodes in scene mode</li> </ul> <p>Thumbnailer:</p> <ul> <li>Added support for turntable rendering</li> </ul>"},{"location":"CHANGELOG/#0022-2022-10-31","title":"0.0.22 (2022-10-31)","text":"<p>General:</p> <ul> <li>Improved <code>GLTF</code> format support</li> <li>Improved <code>VXL</code> format support</li> <li>Improved Qubicle <code>QB</code> support</li> <li>Fixed block id parsing for StarMade voxel models</li> <li>Major improvements in scene graph transform handling</li> <li>Improved voxelization of meshes with voxels</li> <li>Added <code>kv6</code> write support</li> <li>Added slab6 <code>vox</code> write support</li> <li>Fixed saving black colors for cubeworld</li> <li>Fixed saving palette index 0 for binvox</li> <li>Fixed Sandbox <code>VXM</code> palette issue</li> <li>Fixed <code>QBCL</code> saving</li> <li>Improved <code>qbt</code> scene graph support</li> <li>Improved <code>vox</code> saving with multiple palettes</li> <li>Improved the file dialog size and special dir handling</li> <li>Improved dark mode support</li> <li>Improved palette support for some formats</li> </ul> <p>Packaging:</p> <ul> <li>There is a snap package available now (<code>io.github.vengi-voxel.vengi.voxedit</code>)</li> </ul> <p>VoxEdit:</p> <ul> <li>Fixed layer color selection if you have multiple layers</li> <li>Fixed moving nodes in the scene graph panel</li> <li>Fixed transforms in scene graph mode (translation, rotation)</li> <li>Allow one to add group and camera nodes</li> <li>Don't just quit the application if you have unsaved data in your scene</li> </ul>"},{"location":"CHANGELOG/#0021-2022-09-05","title":"0.0.21 (2022-09-05)","text":"<p>General:</p> <ul> <li>Added support for minecraft 1.13 region files</li> <li>Added support for loading minecraft <code>level.dat</code> (only with supported region files)</li> <li>Added support for WorldEdit <code>schematics</code></li> <li>Added support for Minecraft <code>nbt</code> files</li> <li>Added support for StarMade voxel models</li> <li>Added support for Quake1 and UFO:Alien Invasion</li> <li>Reduced memory footprint for voxelizing huge meshes</li> <li>Support wrap mode texture settings for gltf voxelization</li> <li>Improved sanity check for Qubicle Binary format support</li> <li>Fixed texture lookup error in <code>gltf</code> voxelization</li> <li>Extended lua vector bindings and Allow one to import heightmaps</li> <li>Improved the file dialog filters</li> <li>Added new lua scripts and extended lua integration in voxconvert</li> <li>Added support for RGB (<code>pal</code>) and Gimp (<code>gpl</code>) palette loading</li> <li>Improved the Command &amp; Conquer <code>VXL</code> format support</li> </ul> <p>VoxEdit:</p> <ul> <li>Fixed resetting the camera in eye mode</li> <li>New asset panel</li> <li>Place images, models and colors via drag and drop into the scene</li> <li>Extended scene mode modifiers to allow resizing the volumes (double click in scene mode)</li> <li>Fixed updating the locked axis plane on change</li> <li>Fixed scene graph node panel width</li> <li>Fixed mesh extraction on chunk boundaries</li> <li>Fixed new volume dialog input handling</li> <li>Fixed cursor being invisible with bloom disabled</li> <li>Fixed cursor face being on the wrong side of the voxel at the volume edges</li> <li>Fixed last opened files with spaces in their names</li> <li>Fixed loading files from command line again</li> <li>Allow one to select scene graph node from the animation timeline</li> <li>Fixed deleting key frames</li> <li>Improved adding new key frames</li> </ul>"},{"location":"CHANGELOG/#0020-2022-06-14","title":"0.0.20 (2022-06-14)","text":"<p>General:</p> <ul> <li>Added support for minecraft <code>schematic</code></li> <li>Refactored and extended the lua script integration</li> <li>Implemented applying depth/height map to a 2d plane</li> <li>Added support for new magicavoxel format (animations)</li> <li>Preserve node hierarchy when saving <code>vxr</code></li> <li><code>GLTF</code> voxelization</li> <li>Allow one to enable certain renderer features</li> <li>Expose more noise functions to the lua scripts</li> <li>Expose more volume functions to the lua scripts</li> <li>Allow one to delete voxels from within a lua script</li> <li>Improved splitting of volumes (target volume size)</li> <li>Expose more region functions to the lua scripts</li> <li>Added more lua example scripts</li> <li>Improved color sampling for voxelization</li> <li>Started to support different palettes in one scene</li> <li>Fixed <code>vxc</code> support</li> <li>Load the palette from the source file</li> <li>Fixed <code>vxm</code> file path when saving <code>vxr</code></li> <li>Save <code>vxmc</code> v12 now</li> <li>Changed default ambient color and gamma values</li> <li>Improved osx dmg file and app bundles</li> </ul> <p>VoxEdit:</p> <ul> <li>Fixed start problems on some systems with multisampled framebuffers</li> <li>Allow one to drag and drop colors from the palette</li> <li>Change between the edit and scene mode is now bound to <code>tab</code></li> <li>Updated imgizmo to support clicking the view cube</li> <li>Cursor is no volume anymore but a plane</li> <li>Implemented plane filling</li> <li>Added extrude feature</li> <li>Allow one to place a single voxel</li> <li>Fixed keyboard input errors that made the ui unusable</li> <li>Don't reload the last opened file with every start</li> </ul> <p>VoxConvert:</p> <ul> <li>Extended <code>--dump</code> to also show the key frames and the voxel count</li> <li>Removed <code>--src-palette</code> (src palette is always used)</li> </ul>"},{"location":"CHANGELOG/#0019-2022-03-27","title":"0.0.19 (2022-03-27)","text":"<p>General:</p> <ul> <li>Replaced minecraft support with own implementation</li> <li>Added support for Sandbox <code>VXA</code> format (via <code>VXR</code>) and improved <code>VXR</code></li> <li>Allow one to change the ui colors via cvar (<code>ui_style</code>)</li> <li>Added bloom render support for vox and vxm</li> <li>Added support for loading key frames if the format supports it</li> <li>Improved apple support in file dialog</li> <li>The palette handling was refactored</li> <li>Allow one to save the MATL chunk in magicavoxel <code>vox</code> files</li> <li>Ability to scale exported mesh with different values for each axis</li> <li>Added stl voxelization support</li> <li>Allow one to modify the camera zoom min/max values</li> <li>Allow one to load different sizes for AoS <code>VXL</code> files</li> <li>Lerp the camera zooming</li> <li>Added support for <code>GLTF</code> export</li> <li>Added experimental export support for <code>FBX</code> ascii</li> <li>Increased the max scene graph model nodes from 256 to 1024</li> </ul> <p>VoxEdit:</p> <ul> <li>Added new command to fill hollows in models</li> <li>Fixed escape key not closing the dialogs</li> <li>Added support for drag and drop the nodes of the scene graph</li> <li>Scene graph rendering improved</li> <li>Removed noise panel (use the lua scripts for noise support)</li> <li>Fixed a lot of undo/redo cases and improved the test cases a lot</li> <li>Fixed viewport screenshot creation (now also bound to F5)</li> <li>Added dialog to configure the mesh and voxel format settings for loading/saving</li> <li>Improved the palette panel</li> <li>Improved the gizmo for translation and rotation</li> <li>Open in scene mode as default</li> </ul> <p>VoxConvert:</p> <ul> <li>Added <code>--image-as-plane</code> and <code>--image-as-heightmap</code> parameters</li> <li>Allow one to create a palette from input files</li> </ul>"},{"location":"CHANGELOG/#0018-2022-02-12","title":"0.0.18 (2022-02-12)","text":"<p>renamed the github project to vengi - the url changed to https://github.com/vengi-voxel/vengi.</p> <p>Build:</p> <ul> <li>Removed own cmake unity-build implementation</li> <li>Fixed build when <code>GAMES</code> was set to <code>OFF</code></li> </ul> <p>General:</p> <ul> <li>Extended qbcl format support</li> <li>Fixed color conversion issue when importing palettes from voxel models</li> <li>Voxelization of <code>obj</code> meshes now also fills the inner parts of the mesh with voxels</li> <li>Fixed magicavoxel pivot issue (sometimes wrong positions)</li> <li>Added support for sandbox <code>vxc</code> format</li> <li>Added support for sandbox <code>vxt</code> format</li> <li>Added new example lua scripts</li> </ul> <p>VoxConvert:</p> <ul> <li><code>--input</code> can now also handle directories</li> </ul> <p>VoxEdit:</p> <ul> <li>Added context actions to scene graph panel</li> <li>Fixed mouse input issues in fullscreen mode</li> <li>Fixed script editor placement</li> </ul>"},{"location":"CHANGELOG/#0017-2022-01-23","title":"0.0.17 (2022-01-23)","text":"<p>General:</p> <ul> <li>Fixed relative path handling for registered paths</li> <li>Stop event loop if window is minimized (reduce cpu usage)</li> <li>Support scene graphs in the voxel formats</li> <li>Fixed a few issues with the magicavoxel vox format (switched to <code>ogt_vox</code>)</li> <li>Load properties from supported voxel formats (<code>vxr</code>, <code>vox</code>, <code>gox</code>)</li> <li>Added support for loading minecraft region files (used enkimi)</li> <li>Fixed <code>vxm</code> pivot and black color issue</li> <li>Added <code>obj</code> voxelization</li> <li>Improved <code>obj</code> export</li> <li>Improved file dialog</li> </ul> <p>VoxConvert:</p> <ul> <li>Added <code>--crop</code> parameter that reduces the volumes to their real voxel sizes</li> <li>Added <code>--split</code> option to cut volumes into smaller pieces</li> <li>Added <code>--export-models</code> to export all the models of a scene into single files</li> <li>Added <code>--dump</code> to dump the scene graph of the input file</li> <li>Added <code>--resize</code> to resize the volumes by the given x, y and z values</li> </ul> <p>VoxEdit:</p> <ul> <li>Fixed torus shape</li> <li>Added scene graph panel</li> <li>Fixed an issue that delayed the start by a few seconds</li> </ul>"},{"location":"CHANGELOG/#0016-2021-12-27","title":"0.0.16 (2021-12-27)","text":"<p>General:</p> <ul> <li>Fixed magicavoxel vox file saving</li> <li>Added support for old magicavoxel (pre RIFF) format</li> <li>Fixed bugs in <code>binvox</code> support</li> <li>Fixed save dir for <code>vxm</code> files when saving <code>vxr</code></li> <li>Save <code>vxm</code> v5 (with included pivot)</li> <li>Support bigger volumes for magicavoxel files</li> </ul> <p>VoxConvert:</p> <ul> <li>Fixed <code>--force</code> handling for target files</li> <li>Allow one to operate on multiple input files</li> <li>Added <code>--translate</code> command line option</li> <li>Added <code>--pivot</code> command line option</li> <li>nippon palette is not loaded if <code>--src-palette</code> is used and it's no hard error anymore if this fails</li> </ul> <p>VoxEdit:</p> <ul> <li>Add recently used files to the ui</li> </ul>"},{"location":"CHANGELOG/#0015-2021-12-18","title":"0.0.15 (2021-12-18)","text":"<p>General:</p> <ul> <li>Fixed missing <code>vxm</code> (v4) saving support</li> <li>Fixed missing palette value for <code>vxm</code> saving</li> <li>Added support for loading only the palettes</li> <li>Added support for goxel <code>gox</code> file format</li> <li>Added support for sproxel <code>csv</code> file format</li> <li>Added support for a lot more image formats</li> <li>Improved lod creation for thin surface voxels</li> <li>Fixed <code>vxr</code> v9 load support</li> <li>Added support for writing <code>vxr</code> files</li> </ul> <p>VoxConvert:</p> <ul> <li>Added option to keep the input file palette and don't perform quantization</li> <li>Allow one to export the palette to <code>png</code></li> <li>Allow one to generate models from heightmap images</li> <li>Allow one to run lua scripts to modify volumes</li> <li>Allow one to export or convert only single layers (<code>--filter</code>)</li> <li>Allow one to mirror and rotate the volumes</li> </ul> <p>Thumbnailer:</p> <ul> <li>Try to use the built-in palette for models</li> </ul> <p>VoxEdit:</p> <ul> <li>Allow one to import palettes from volume formats, too</li> <li>Implemented camera panning</li> <li>Added more layer merge functions</li> </ul>"},{"location":"CHANGELOG/#0014-2021-11-21","title":"0.0.14 (2021-11-21)","text":"<p>General:</p> <ul> <li>License for our own voxel models is now CC-BY-SA</li> <li>Support loading just the thumbnails from voxel formats</li> <li>Support bigger volume sizes for a few formats</li> <li>Don't pollute the home directory with build dir settings</li> <li>Fixed gamma handling in shaders</li> <li>Added bookmark support to the ui dialog</li> </ul> <p>Thumbnailer:</p> <ul> <li>Added <code>qbcl</code> thumbnail support</li> </ul> <p>VoxEdit:</p> <ul> <li>Render the inactive layer in grayscale mode</li> </ul>"},{"location":"CHANGELOG/#0013-2021-10-29","title":"0.0.13 (2021-10-29)","text":"<p>General:</p> <ul> <li>Logfile support added</li> <li>Fixed windows DLL handling for animation hot reloading</li> </ul> <p>UI:</p> <ul> <li>Fixed log notifications taking away the focus from the current widget</li> </ul> <p>VoxEdit:</p> <ul> <li>Fixed windows OpenGL error while rendering the viewport</li> </ul>"},{"location":"CHANGELOG/#0012-2021-10-26","title":"0.0.12 (2021-10-26)","text":"<p>General:</p> <ul> <li>Fixed a few windows compilation issues</li> <li>Fixed issues in the automated build pipelines to produce windows binaries</li> </ul>"},{"location":"CHANGELOG/#0011-2021-10-25","title":"0.0.11 (2021-10-25)","text":"<p>General:</p> <ul> <li>Added url command</li> <li>Reduced memory allocations per frame</li> <li>Added key bindings dialog</li> <li>Added notifications for warnings and errors in the ui</li> <li>Fixed Sandbox Voxedit <code>VXM</code> v12 loading and added saving support</li> <li>Fixed MagicaVoxel vox file rotation handling</li> </ul> <p>VoxEdit:</p> <ul> <li>Removed old ui and switched to dearimgui</li> <li>Added lua script editor</li> <li>Added noise api support to the lua scripts</li> </ul>"},{"location":"CHANGELOG/#0010-2021-09-19","title":"0.0.10 (2021-09-19)","text":"<p>General:</p> <ul> <li>Added <code>--version</code> and <code>-v</code> commandline option to show the current version of each application</li> <li>Fixed texture coordinate indices for multi layer obj exports</li> <li>Improved magicavoxel transform support for some models</li> <li>Fixed magicavoxel x-axis handling</li> <li>Support newer versions of <code>vxm</code> and <code>vxr</code></li> <li>Fixed bug in file dialog which prevents you to delete characters #77</li> </ul> <p>VoxEdit:</p> <ul> <li>Improved scene edit mode</li> <li>Progress on the ui conversion to dearimgui</li> </ul> <p>Tools:</p> <ul> <li>Rewrote the ai debugger</li> </ul>"},{"location":"CHANGELOG/#009-2020-10-03","title":"0.0.9 (2020-10-03)","text":"<p>General:</p> <ul> <li>Fixed obj texcoord export: Sampling the borders of the texel now</li> <li>Added multi object support to obj export</li> </ul>"},{"location":"CHANGELOG/#008-2020-09-30","title":"0.0.8 (2020-09-30)","text":"<p>General:</p> <ul> <li>Added obj and ply export support</li> <li>Restructured the documentation</li> <li>Improved font support for imgui ui</li> </ul> <p>Backend:</p> <ul> <li>Reworked ai debugging network protocol</li> <li>Optimized behaviour tree filters</li> </ul>"},{"location":"CHANGELOG/#007-2020-09-15","title":"0.0.7 (2020-09-15)","text":"<p>General:</p> <ul> <li>Fixed wrong-name-for-symlinks shown</li> <li>Added support for writing qef files</li> <li>Added lua script interface to generate voxels</li> <li>Added stacktrace support for windows</li> <li>Refactored module structure (split app and core)</li> <li>Optimized character animations</li> <li>Hot reload character animation C++ source changes in debug builds</li> <li>Added quaternion lua support</li> <li>Updated external dependencies</li> <li>Refactored lua bindings</li> <li>Support Chronovox-Studio files (<code>csm</code>)</li> <li>Support Nick's Voxel Model files (<code>nvm</code>)</li> <li>Support more versions of the <code>vxm</code> format</li> </ul> <p>VoxEdit:</p> <ul> <li>Converted some voxel generation functions to lua</li> <li>Implemented new voxel generator scripts</li> </ul>"},{"location":"CHANGELOG/#006-2020-08-02","title":"0.0.6 (2020-08-02)","text":"<p>General:</p> <ul> <li>Fixed gamma cvar usage</li> <li>Enable vsync by default</li> <li>Updated external dependencies</li> <li>Activated OpenCL in a few tools</li> <li>Added symlink support to virtual filesystem</li> </ul> <p>VoxEdit:</p> <ul> <li>Fixed loading palette lua script with material definitions</li> <li>Fixed error in resetting mirror axis</li> <li>Fixed noise generation</li> <li>Reduced palette widget size</li> <li>Fixed palette widget being invisible on some dpi scales</li> </ul>"},{"location":"CHANGELOG/#005-2020-07-26","title":"0.0.5 (2020-07-26)","text":"<p>Client:</p> <ul> <li>Fixed movement</li> </ul> <p>Server:</p> <ul> <li>Fixed visibility check</li> <li>Fixed segfault while removing npcs</li> </ul> <p>VoxEdit:</p> <ul> <li>Started to add scene mode edit support (move volumes)</li> </ul> <p>VoxConvert:</p> <ul> <li>Support different palette files (cvar <code>palette</code>)</li> <li>Support writing outside the registered application paths</li> <li>Allow one to overwrite existing files</li> </ul> <p>General:</p> <ul> <li>Switched to <code>qb</code> as default volume format</li> <li>Improved scene graph support for Magicavoxel <code>vox</code> files</li> <li>Fixed invisible voxels for <code>qb</code> and <code>qbt</code> (Qubicle) volume format</li> <li>Support automatic loading different volume formats for assets</li> <li>Support Command&amp;Conquer <code>vxl</code> files</li> <li>Support Ace of Spades map files (<code>vxl</code>)</li> <li>Support Qubicle exchange format (<code>qef</code>)</li> <li>Perform mesh extraction in dedicated threads for simple volume rendering</li> <li>Improved gizmo rendering and translation support</li> <li>Fixed memory leaks on shutdown</li> <li>Improved profiling support via tracy</li> </ul>"},{"location":"CHANGELOG/#004-2020-06-07","title":"0.0.4 (2020-06-07)","text":"<p>General:</p> <ul> <li>Added support for writing <code>binvox</code> files</li> <li>Added support for reading <code>kvx</code> (Build-Engine) and <code>kv6</code> (SLAB6) voxel volumes</li> <li>Performed some AFL hardening on voxel format code</li> <li>Don't execute keybindings if the console is active</li> <li>Added basic shader storage buffer support</li> <li>Reduced voxel vertex size from 16 to 8 bytes</li> <li>Apply checkerboard pattern to water surface</li> <li>Improved tracy profiling support</li> <li>A few highdpi fixes</li> </ul> <p>Server:</p> <ul> <li>Allow one to specify the database port</li> <li>Fixed loading database chunks</li> </ul> <p>VoxEdit:</p> <ul> <li>Added <code>scale</code> console command to produce LODs</li> </ul> <p>VoxConvert:</p> <ul> <li>Added ability to merge all layers into one</li> </ul>"},{"location":"CHANGELOG/#003-2020-05-17","title":"0.0.3 (2020-05-17)","text":"<p>Assets:</p> <ul> <li>Added music tracks</li> <li>Updated and added some new voxel models</li> </ul> <p>VoxEdit:</p> <ul> <li>Made some commands available to the ui</li> <li>Tweak <code>thicken</code> command</li> <li>Updated default tree generation ui values</li> <li>Save layers to all supported formats</li> <li>Fixed tree generation issue for some tree types</li> <li>Changed default reference position to be at the center bottom</li> <li>Reduced max supported volume size</li> </ul> <p>General:</p> <ul> <li>Print stacktraces on asserts</li> <li>Improved tree generation (mainly used in voxedit)</li> <li>Fixed a few asserts in debug mode for the microsoft stl</li> <li>Added debian package support</li> <li>Fixed a few undefined behaviour issues and integer overflows that could lead to problems</li> <li>Reorganized some modules to speed up compilation and linking times</li> <li>Improved audio support</li> <li>Fixed timing issues</li> <li>Fixed invalid GL states after deleting objects</li> </ul> <p>VoxConvert:</p> <ul> <li>Added a new tool to convert different voxel volumes between supported formats      Currently supported are cub (CubeWorld), vox (MagicaVoxel), vxm (VoxEdit Sandbox), binvox      and qb/qbt (Qubicle)</li> </ul> <p>Client:</p> <ul> <li>Added footstep and ambience sounds</li> </ul>"},{"location":"CHANGELOG/#002-2020-05-06","title":"0.0.2 (2020-05-06)","text":"<p>VoxEdit:</p> <ul> <li>Static linked VC++ Runtime</li> <li>Extract voxels by color into own layers</li> <li>Updated tree and noise windows</li> <li>Implemented <code>thicken</code> console command</li> <li>Escape abort modifier action</li> <li>Added L-System panel</li> </ul> <p>General:</p> <ul> <li>Fixed <code>binvox</code> header parsing</li> <li>Improved compilation speed</li> <li>Fixed compile errors with locally installed glm 0.9.9</li> <li>Fixed setup-documentation errors</li> <li>Fixed shader pipeline rebuilds if included shader files were modified</li> <li>Improved palm tree generator</li> <li>Optimized mesh extraction for the world (streaming volumes)</li> <li>Added new voxel models</li> <li>(Re-)added Tracy profiler support and removed own imgui-based implementation</li> <li>Fixed writing of key bindings</li> <li>Improved compile speed and further removed the STL from a lot of places</li> <li>Updated all dependencies to their latest version</li> </ul> <p>Server/Client:</p> <ul> <li>Added DBChunkPersister</li> <li>Built-in HTTP server to download the chunks</li> <li>Replaced ui for the client</li> </ul> <p>Voxel rendering:</p> <ul> <li>Implemented reflection for water surfaces</li> <li>Apply checkerboard pattern to voxel surfaces</li> <li>Up-scaling effect for new voxel chunks while they pop in</li> <li>Optimized rendering by not using one giant vbo</li> </ul>"},{"location":"CHANGELOG/#001-initial-release-2020-02-08","title":"0.0.1 \"Initial Release\" (2020-02-08)","text":"<p>VoxEdit:</p> <ul> <li>initial release</li> </ul>"},{"location":"Compilation/","title":"Building","text":"<p>The project should work on Linux, Windows and OSX. It should work with any ide that is either supported by cmake or has direct cmake support. Personally I'm using vscode with clangd at the moment. But also the command line with plain old <code>make</code>.</p>"},{"location":"Compilation/#linux","title":"Linux","text":"<p>There is a <code>Makefile</code> wrapper around the build system. You can just run <code>make</code> in the project root folder.</p> <p>Every project has some extra CMake targets. There are e.g. <code>voxedit-run</code>, <code>voxedit-debug</code> and <code>voxedit-perf</code> if the needed tools were found during cmake's configure phase.</p> <p>That means that you can compile a single target by typing <code>make voxedit</code>, run it by typing <code>make voxedit-run</code>, debug it by typing <code>make voxedit-debug</code> and profile it by typing <code>make voxedit-perf</code>. There are also other targets for valgrind - just use the tab completion in the build folder to get a list.</p>"},{"location":"Compilation/#windows","title":"Windows","text":"<p>The project can be built with every ide that supports cmake. QTCreator, Eclipse CDT, vscode or Visual Studio. Just install cmake, generate the project files, and open them in your ide.</p> <p>Set up ninja to speed up the whole build-link-run cycle a lot!</p>"},{"location":"Compilation/#visual-studio-code","title":"Visual Studio Code","text":"<ul> <li>Download ninja ninja-build.org</li> <li>Download cmake cmake.org/download</li> <li>Download vscode code.visualstudio.com</li> <li>Download Visual Studio (for the compiler) visualstudio.microsoft.com</li> </ul> <p>Inside vscode you have to install the c++ plugins. The easiest might be to install the c++ plugins from microsoft. Just make sure the cmake plugin is part of the collection.</p> <p>If you have problems with the intellisense plugin from microsoft, you can also use the clangd plugin.</p> <p>Open your git clone directory in vscode and let it configure via cmake. It will pick ninja and the visual studio compiler automatically.</p>"},{"location":"Compilation/#make","title":"Make","text":"<p>In order to use the <code>Makefile</code>, you should install ninja (see above), gnu make, start Native Tools Command Prompt from your start menu, and just run <code>make</code> in that shell in your git clone directory. Keep in mind that ninja, make and cmake must be available via PATH environment variable.</p> <p>Check out the Linux section about more details regarding the <code>Makefile</code> targets.</p> <p>Here is a step-by-step guide from a user to compile vengi on a windows machine via command line make. After you've downloaded the above mentioned software, run the following steps:</p> <ul> <li>Install CMake</li> <li>Win+R &gt; type <code>sysdm.cpl</code> &gt; Advanced &gt; Environment Variables...</li> <li>Click \"New\" and add this to your <code>PATH</code>: <code>C:/Program Files (x86)/GnuWin32/bin</code></li> <li>Add <code>ninja.exe</code> to <code>PATH</code> or if you're lazy paste it into <code>C:/Program Files (x86)/GnuWin32/bin</code></li> <li>Install Visual Studio Community</li> <li>You need to add at least 2 Workloads before installation: \"MSVC\" &amp; \"C++ Address Sanitizer\"</li> <li>Navigate find the C/C++ compiler <code>cl.exe</code> somewhere in <code>C:/Program Files/Microsoft Visual Studio/&lt;year&gt;/Community/VC/Tools/MSVC/&lt;version&gt;/bin/Hostx64/x64/cl.exe</code> and copy this path. Example: <code>C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.38.33130/bin/Hostx64/x64/cl.exe</code></li> <li>Copy the path in the folder address bar and add 3 more environment variables <code>CC</code> and <code>CMAKE_C_COMPILER</code> and <code>CMAKE_CXX_COMPILER</code>with this path value.</li> <li>Then add just the directory (without <code>cl.exe</code>) into the <code>PATH</code> environment variable</li> <li>Open Visual Studio Community &gt; Skip Sign-In &gt; Skip this for Now</li> <li>Restart computer</li> <li>Windows &gt; Search &gt; <code>x64</code> &gt; open: <code>x64 Native Tools Command Prompt for VS 2022</code></li> <li><code>cd</code> to the vengi folder</li> <li>Type <code>make</code> to configure and build or build specific targets like <code>make voxedit</code> or <code>make voxconvert</code></li> </ul> <p> </p> <p>If you want to go further, install vcpkg - see dependencies for the command line - but you can skip here if you don't want vcpkg.</p>"},{"location":"Compilation/#mac","title":"Mac","text":"<p>You can generate your xcode project via cmake or build like this:</p> <pre><code>mkdir build\ncd build\ncmake ..\ncmake --build .\n</code></pre> <p>If you are using the cmake Makefile generator, you get the same targets as for Linux above. You can also just type <code>make voxedit-run</code> to compile and run only VoxEdit.</p>"},{"location":"Compilation/#hints","title":"Hints","text":"<p>If you encounter any problems, it's also a good start to check out the build pipelines of the project. This is always the most up-to-date information about how-to-build-the-project that you will find. But also please don't hesitate to ask for help on our discord server.</p>"},{"location":"Compilation/#enforce-bundled-libs","title":"Enforce bundled libs","text":"<p>You can enforce the use of the bundled libs by putting a <code>&lt;LIB&gt;_LOCAL=1</code> in your cmake cache. Example: By putting <code>LUA54_LOCAL=1</code> into your cmake cache, you enforce the use of the bundled lua sources from <code>contrib/libs/lua54</code>.</p>"},{"location":"Compilation/#build-doxygen","title":"Build doxygen","text":"<p>Run <code>make doc</code> from the project root to execute doxygen. After that install the mcss theme as described here: mcss.mosra.cz/documentation/.</p>"},{"location":"Configuration/","title":"Configuration","text":""},{"location":"Configuration/#variables","title":"Variables","text":"<p>The engine can get configured by so called cvars (configuration variables). These variables can be modified from within the game via key bindings, built-in console, the ui or scripts.</p> <p>To get a list of supported cvars (they might differ from application to application), type the command <code>cvarlist</code> to the built-in console - or execute the application with <code>--help</code> (Example: <code>vengi-voxedit.exe --help</code>).</p> <p>The variables can get their initial value from various sources. The highest order is the command line. If you specify it on the command line, every other method will not be used. If the engine finds the cvar name in your environment variables, this one will take precedence over the one that is found in the configuration file. Next is the configuration file - this one will take precedence over the default settings that are specified in the code.</p> <p>The environment variable can be either lower case or upper case. For example it will work if you have <code>CL_GAMMA</code> or <code>cl_gamma</code> exported. The lower case variant has the higher priority.</p>"},{"location":"Configuration/#commandline","title":"Commandline","text":"<pre><code>./vengi-voxvonvert -set voxformat_scale 2.0 [...]\n</code></pre>"},{"location":"Configuration/#environment","title":"Environment","text":"<pre><code>export VOXFORMAT_SCALE=2.0\n./vengi-voxconvert [...]\n</code></pre>"},{"location":"Configuration/#configuration-file","title":"Configuration file","text":"<ul> <li>Linux: <code>~/.local/share/vengi/voxconvert/voxconvert.vars</code></li> <li>Windows: <code>C:/Users/bob/AppData/Roaming/vengi/voxconvert/voxconvert.vars</code></li> <li>Mac: <code>/Users/bob/Library/Application Support/vengi/voxconvert/voxconvert.vars</code></li> </ul> <p>These folders not only contain the configuration file, but also the logs and other files that are created by the application. <code>log.txt</code> and <code>crash.txt</code> are the most important files that you can attach to a bug report.</p>"},{"location":"Configuration/#search-paths","title":"Search paths","text":"<p>You can get a list of search paths by calling the particular application with the <code>--help</code> parameter on the command line. This will print a list of search paths. You can even add your own paths by setting the cvar <code>core_path</code>.</p> <p>For packagers it might be interesting to set the <code>PKGDATADIR</code> cmake variable.</p>"},{"location":"Configuration/#commands","title":"Commands","text":"<p>To get a list of supported commands (they might differ from application to application), type the command <code>cmdlist</code> to the built-in console.</p> <p>You can also get a list when doing <code>./vengi-app --help</code> on the command line.</p>"},{"location":"Configuration/#key-bindings","title":"Key bindings","text":"<p>You can also modify or add key bindings to commands. Type <code>bindlist</code> to the console to get a list of the current active bindings (and also here: they might differ from application to application). The command <code>bind</code> can be used to configure keybindings on-the-fly. These bindings are saved to a file on shutdown.</p> <p>VoxEdit has an ui panel to show the configured keybindings - see controls for more details.</p>"},{"location":"Configuration/#logging","title":"Logging","text":"<p>You can either log via syslog (on unix) or to stdout (this might of course differ from platform to platform).</p> <p>The log level is configured by the <code>core_loglevel</code> variable. The lower the value, the more you see. <code>1</code> is the highest log level (trace), where 5 is the lowest log level (error).</p> <ul> <li><code>trace</code>: 1</li> <li><code>debug</code>: 2</li> <li><code>info</code>: 3</li> <li><code>warn</code>: 4</li> <li><code>error</code>: 5</li> </ul>"},{"location":"Configuration/#general","title":"General","text":"<p>To get a rough usage overview, you can start any application with <code>--help</code>. It will print out the commands and configuration variables with a description and hints how to modify/use them.</p>"},{"location":"Configuration/#video-settings","title":"Video settings","text":"Name Description <code>cl_vsync</code> enable or disable v-sync <code>cl_gamma</code> tweak the gamma value that is applied last on rendering <code>cl_display</code> the display index if you are using multiple monitors <code>[0-numDisplays)</code>"},{"location":"Configuration/#voxel-settings","title":"Voxel settings","text":"<p>A few cvars exists to tweak the export or import of several formats.</p> <p>Some of these settings are only for voxel format, others are only for the mesh formats like ply, gltf, stl, fbx and obj.</p> Name Description Example <code>core_colorreduction</code> This can be used to tweak the color reduction by switching to a different algorithm. Possible values are <code>Octree</code>, <code>Wu</code>, <code>NeuQuant</code>, <code>KMeans</code> and <code>MedianCut</code>. This is useful for mesh based formats or RGBA based formats like e.g. AceOfSpades vxl. Octree <code>palformat_maxsize</code> The maximum size of an image in x and y direction to quantize to a palette 512 <code>palformat_rgb6bit</code> Use 6 bit color values for the palette (0-63) - used e.g. in C&amp;C pal files true/false <code>voxel_meshmode</code> Set to 1 to use the marching cubes algorithm to produce the mesh 0/1 <code>voxformat_ambientocclusion</code> Don't export extra quads for ambient occlusion voxels true/false <code>voxformat_binvoxversion</code> Save in version 1, 2 or the unofficial version 3 1/2/3 <code>voxformat_colorasfloat</code> Export the vertex colors as float or - if set to false - as byte values (GLTF/Unreal) true/false <code>voxformat_createpalette</code> Setting this to false will use use the palette configured by <code>palette</code> cvar and use those colors as a target. This is mostly useful for meshes with either texture or vertex colors or when importing rgba colors. This is not used for palette based formats - but also for RGBA based formats. true/false <code>voxformat_emptypaletteindex</code> By default this is <code>-1</code> which means that no color is skipped. Pick 0-255 to remove that palette index from the final saved file. NOTE: this only works for formats that don't force the empty voxel to be <code>0</code> or <code>255</code> (or any other index) already <code>voxformat_fillhollow</code> Fill the inner parts of completely close objects, when voxelizing a mesh format. To fill the inner parts for non mesh formats, you can use the fillhollow.lua script. true/false <code>voxformat_gltf_khr_materials_pbrspecularglossiness</code> Apply KHR_materials_pbrSpecularGlossiness extension on saving gltf files true/false <code>voxformat_gltf_khr_materials_specular</code> Apply KHR_materials_specular extension on saving gltf files true/false <code>voxformat_imageheightmapminheight</code> The minimum height of the heightmap when importing an image as heightmap 0 <code>voxformat_imageimporttype</code> 0 = plane, 1 = heightmap, 2 = volume 0 <code>voxformat_imagesavetype</code> 0 = plane, 1 = heightmap, 3 = thumbnail 0 <code>voxformat_imagesliceoffsetaxis</code> The axis to offset the slices when importing images as volumes or heightmaps x/y/z <code>voxformat_imagesliceoffset</code> The offset of the slices when importing images as volumes or heightmaps 0 <code>voxformat_imagevolumemaxdepth</code> The maximum depth of the volume when importing an image as volume 1 <code>voxformat_imagevolumebothsides</code> Import the image as volume for both sides true/false <code>voxformat_mergequads</code> Merge similar quads to optimize the mesh true/false <code>voxformat_merge</code> Merge all models into one object true/false <code>voxformat_mesh_simplify</code> Simplify the mesh before voxelizing it true/false <code>voxformat_optimize</code> Apply mesh optimizations when saving mesh based formats true/false <code>voxformat_pointcloudsize</code> Specify the side length for the voxels when loading a point cloud 1 <code>voxformat_qbtpalettemode</code> Use palette mode in qubicle qbt export true/false <code>voxformat_qbtmergecompounds</code> Merge compounds in qbt export true/false <code>voxformat_qbsavelefthanded</code> Save qubicle format as left handed true/false <code>voxformat_qbsavecompressed</code> Save qubicle with RLE compression true/false <code>voxformat_quads</code> Export to quads true/false <code>voxformat_reusevertices</code> Reuse vertices or always create new ones true/false <code>voxformat_rgbflattenfactor</code> To flatten the RGB colors when importing volumes (0-255) from RGBA or mesh based formats 1 <code>voxformat_rgbweightedaverage</code> If multiple triangles contribute to the same voxel the color values are averaged based on their area contribution true/false <code>voxformat_savevisibleonly</code> Save only visible nodes true/false <code>voxformat_scale</code> Scale the vertices for voxelization on all axis by the given factor 1.0 <code>voxformat_scale_x</code> Scale the vertices for voxelization on X axis by the given factor 1.0 <code>voxformat_scale_y</code> Scale the vertices for voxelization on Y axis by the given factor 1.0 <code>voxformat_scale_z</code> Scale the vertices for voxelization on Z axis by the given factor 1.0 <code>voxformat_schematictype</code> The type of schematic format to use when saving schematics mcedit2, worldedit, schematica <code>voxformat_skinaddgroups</code> Add groups for body parts of Minecraft skins true/false <code>voxformat_skinapplytransform</code> Apply transforms to Minecraft skins true/false <code>voxformat_skinmergefaces</code> Merge faces of Minecraft skins into a single volume true/false <code>voxformat_texturepath</code> Additional search path for textures when importing mesh formats <code>voxformat_transform_mesh</code> Apply the keyframe transform to the mesh true/false <code>voxformat_voxcreategroups</code> Magicavoxel vox groups true/false <code>voxformat_voxcreatelayers</code> Magicavoxel vox layers true/false <code>voxformat_voxelizemode</code> <code>0</code> = high quality, <code>1</code> = faster and less memory 0/1 <code>voxformat_vxllodhva</code> Load the HVA file for VXL animations true/false <code>voxformat_vxlnormaltype</code> Normal type for VXL format - 2 (TS) or 4 (RedAlert2) 2/4 <code>voxformat_withcolor</code> Export vertex colors true/false <code>voxformat_withmaterials</code> Export material properties for formats that supports this true/false <code>voxformat_withnormals</code> Export smoothed normals for cubic surface meshes (marching cubes always uses normals) true/false <code>voxformat_withtexcoords</code> Export texture coordinates true/false"},{"location":"Dependencies/","title":"Dependencies","text":"<ul> <li>cmake</li> <li>ninja-build or make</li> <li>compiler (see compilation docs)</li> </ul>"},{"location":"Dependencies/#libraries","title":"Libraries","text":"<ul> <li>development headers/libs for</li> <li>glm</li> <li>lua &gt;= 5.4</li> <li>sdl2 &gt; 2.0.16</li> <li>gtest (and gmock)</li> <li>freetype2 (optional)</li> <li>libjpeg (optional but recommended)</li> <li>libpng (optional)</li> </ul> <p>Some of these dependencies might not be available as packages in your toolchain - most of them are also bundled with the application. But local installed headers always have the higher priority. Usually you don't have to install anything of these.</p>"},{"location":"Dependencies/#debian","title":"Debian","text":"<pre><code>apt-get install binutils-dev libunwind-dev libglm-dev lua5.4 liblua5.4-dev libfreetype-dev libsdl2-dev wayland-protocols pkg-config libjpeg-dev libpng-dev\n</code></pre>"},{"location":"Dependencies/#rockylinux","title":"RockyLinux","text":"<pre><code>dnf install epel-release\ndnf config-manager --set-enabled crb\ndnf install SDL2-devel freetype-devel libjpeg-devel binutils-devel make cmake gcc g++ libasan libubsan ninja-build libcurl-devel\n</code></pre> <p>To also build the rpm files:</p> <pre><code>dnf install rpm-devel\nmkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}\nrpmbuild -ba build/vengi.spec\n</code></pre>"},{"location":"Dependencies/#arch","title":"Arch","text":"<pre><code>pacman -Sy git make cmake ninja sdl2 clang\n</code></pre>"},{"location":"Dependencies/#brew","title":"Brew","text":"<pre><code>brew install sdl2 jpeg-turbo freetype cmake ninja pkg-config\n</code></pre>"},{"location":"Dependencies/#windows","title":"Windows","text":"<pre><code>vcpkg install pkg-config sdl2 libjpeg-turbo lua glm glslang gtest freetype\n</code></pre>"},{"location":"FAQ/","title":"Frequently asked questions","text":""},{"location":"FAQ/#ive-found-a-bug-or-have-a-feature-request","title":"I've found a bug or have a feature request.","text":"<p>Please either connect to our discord server or open a ticket on the vengi github page.</p>"},{"location":"FAQ/#what-is-a-cvar","title":"What is a cvar?","text":"<p>I am a quake child and a cvar is a configuration variable. This allows you to change the behaviour of the program from outside. See the configuration article for more details. You can also always see all cvars and options of a tool by calling it from the command line with <code>--help</code> as parameter.</p>"},{"location":"FAQ/#does-vengi-support-format-xy","title":"Does vengi support format XY?","text":"<p>We have a table with formats. You can find here whether only reading or also writing is supported.</p>"},{"location":"FAQ/#does-vengi-support-animations","title":"Does vengi support animations?","text":"<p>Yes, vengi supports animations and vengi-voxedit has a timeline to manage key frames. You can even export those animations to some formats like <code>gltf</code> and re-import them afterwards.</p> <p>See this youtube video</p>"},{"location":"FAQ/#does-vengi-support-shaders-like-magicavoxel-does","title":"Does vengi support shaders like magicavoxel does?","text":"<p>Sort of - vengi doesn't use shaders for this - but lua scripts. There are already quite a few example available in the <code>scripts</code> folder that comes bundles with your vengi application - from small helper scripts to full scene creation.</p>"},{"location":"FAQ/#no-colors-after-voxelization-whats-wrong","title":"No colors after voxelization - what's wrong?","text":"<p>Your model doesn't have the colors you want? This usually happens if your input model doesn't have properly set up the texture paths. Vengi is trying to perform some lookups automatically. But the texture names have to match. What does this mean? A file that specifies a material texture with the name <code>albedo.png</code> but only comes with a texture named <code>texture-albedo.png</code> won't get proper colors.</p> <p>Textures are stored in a subfolder:</p> <p>Sometimes the textures were moved into subfolders, e.g. a <code>textures</code> subfolder - but the <code>fbx</code>, <code>glb</code> (you name it) files were not adopted and only refer to <code>texture1.png</code> where they should have been pointed to <code>textures/texture1.png</code>. In this case you can specify the cvar <code>voxformat_texturepath</code> to point to the path where the texture files are (but keep in mind, that the names still have to match).</p> <p>Sometimes it's also just the case-sensitivity of your filesystem. This is true for both the path and the filename (including the extension).</p>"},{"location":"FAQ/#my-model-is-very-smallbig-after-voxelization","title":"My model is very small/big after voxelization","text":"<p>Vengi uses 1 unit in your mesh for one voxel. So if your model is scaled down or up to fit the needs for your own workflow, you can scale the model up with the cvar <code>voxformat_scale</code>. If your model is only shown very small/big in vengi-voxedit scene mode, this means that the node got a scaling applied. Switch to the node inspector and reset the scale value for the node. This is not related to the previously mentioned cvar - the cvar scales the geometry - not the transformation matrices in the scene.</p>"},{"location":"FAQ/#some-parts-of-a-model-are-not-available-after-vengi-saved-them","title":"Some parts of a model are not available after vengi saved them","text":"<p>There are features that are not supported for all formats that vengi supports. E.g. most formats are not able to store animations. If you are going to create a scene in vengi-voxedit, the best option to preserve all settings and scene features is to save in <code>vengi</code> format itself. You can later convert to any other supported format - but in case the target format doesn't support a feature, you still have the full scene file in <code>vengi</code> format.</p>"},{"location":"FAQ/#is-vengi-available-in-my-language","title":"Is vengi available in my language?","text":"<p>Probably not - but vengi offers translation support. So if nobody was faster in translating vengi into your language, feel free to do so. And please also consider to send the translation.</p>"},{"location":"FAQ/#which-platforms-are-supported","title":"Which platforms are supported?","text":"<p>Windows, Linux, MacOS and web</p>"},{"location":"FAQ/#how-to-run-the-vengi-voxconvert-command-line-tool-on-windows","title":"How to run the <code>vengi-voxconvert</code> command line tool on Windows","text":"<p>Open a terminal and navigate to the folder where you extracted the files. You can use <code>cmd.exe</code> or <code>PowerShell</code>.</p> <p>To run the tool, use the command <code>vengi-voxconvert.exe</code> followed by the parameters you want to use.</p> <p>If you just double click it from the explorer, it will open a console window and close it immediately after the tool has finished.</p>"},{"location":"FAQ/#it-doesnt-work-on-my-system","title":"It doesn't work on my system","text":"<p>Please fill a bug report on the vengi github page. Please include as much information as possible, like your operating system, the version of vengi you are using and the steps to reproduce the issue. There are usually also files called <code>log.txt</code> and <code>crash.txt</code> in your vengi data folder that you can attach to the issue.</p>"},{"location":"FormatSpec/","title":"VENGI File Format Specification","text":"<p>Everything is stored in little endian.</p>"},{"location":"FormatSpec/#overview","title":"Overview","text":"<p>The VENGI format is designed to store scene graph data including node properties, animations, voxel data, and palette information. The data is stored in a compressed format using ZIP compression.</p>"},{"location":"FormatSpec/#file-structure","title":"File Structure","text":"<p>A VENGI file consists of the following main sections:</p> <ol> <li>Magic Number: A 4-byte identifier <code>VENG</code>.</li> <li>Zip data: zlib header (0x78, 0xDA)<ul> <li>Version: A 4-byte version number. The current supported version is <code>6</code>.</li> <li>Scene Graph Data: Contains information about the scene graph nodes.</li> </ul> </li> </ol>"},{"location":"FormatSpec/#node-structure","title":"Node Structure","text":"<p>Nodes are composed of data chunks that each start with a FourCC code.</p> <ul> <li><code>NODE</code>: Indicates the beginning of a scene graph node.<ul> <li><code>PROP</code>: Contains properties of a node (only present if there are properties).</li> <li><code>DATA</code>: Contains voxel data of a node (only if type is <code>Model</code>).</li> <li><code>PALC</code>: Contains palette colors (only present if PALI is not).</li> <li><code>PALN</code>: Contains palette normals</li> <li><code>PALI</code>: Contains a palette identifier (only present if PALC is not).</li> <li><code>ANIM</code>: Contains animation data for a node.<ul> <li><code>KEYF[]</code>: Contains keyframe data for an animation.</li> <li><code>ENDA</code>: Marks the end of an animation chunk.</li> </ul> </li> <li><code>NODE[]</code>: child nodes (only present if there are child nodes)</li> <li><code>ENDN</code>: Marks the end of a node chunk.</li> </ul> </li> </ul>"},{"location":"FormatSpec/#detailed-format-description","title":"Detailed Format Description","text":""},{"location":"FormatSpec/#magic-number-and-version","title":"Magic Number and Version","text":"<ul> <li>Magic Number: <code>0x56454E47</code> (<code>'VENG'</code>)</li> <li>Version: 4-byte unsigned integer (already part of the compressed data)</li> <li>Root node: The scene graph root node</li> </ul>"},{"location":"FormatSpec/#scene-graph-nodes","title":"Scene Graph Nodes","text":"<p>Each node chunk begins with the <code>NODE</code> FourCC and includes the following information:</p> <ul> <li>Node Name: String (16-bit length prefix, followed by UTF-8 encoded string)</li> <li>Node Type: String (16-bit length prefix, followed by UTF-8 encoded string)</li> <li>Node UUID: two 64 bit unsigned integers in little endian</li> <li>Node ID: 4-byte signed integer</li> <li>Reference Node ID: 4-byte signed integer (for referenced nodes - <code>-1</code> if no node is referenced)</li> <li>Visibility: 1-byte boolean</li> <li>Lock State: 1-byte boolean</li> <li>Color: 4-byte ABGR value</li> <li>Pivot: Three 4-byte floats (x, y, z)</li> <li>Properties: Properties chunk - optional if the node doesn't have any properties</li> <li>Palette: Palette chunk</li> <li>Data: Data chunk</li> <li>Animations: n-Animation chunks</li> <li>Child nodes: Node chunk</li> </ul> <p>Node types are:</p> <ul> <li><code>Root</code></li> <li><code>Model</code></li> <li><code>ModelReference</code></li> <li><code>Group</code></li> <li><code>Camera</code></li> <li><code>Point</code></li> </ul> <p>Each node has the FourCC <code>ENDN</code> at its end</p> <p>You should not rely on the order of chunks when loading a <code>vengi</code> file.</p>"},{"location":"FormatSpec/#node-properties","title":"Node Properties","text":"<p>Node properties are stored in the <code>PROP</code> chunk.</p> <p>Note: This chunk is only available if the node has properties.</p> <ul> <li>FourCC: <code>PROP</code></li> <li>Property Count: 4-byte unsigned integer</li> <li>Properties: For each property:<ul> <li>Key: String (16-bit length prefix, followed by UTF-8 encoded string)</li> <li>Value: String (16-bit length prefix, followed by UTF-8 encoded string)</li> </ul> </li> </ul>"},{"location":"FormatSpec/#voxel-data","title":"Voxel Data","text":"<p>Voxel data is stored in the <code>DATA</code> chunk.</p> <p>Note: This chunk is only available if the node is a model node.</p> <ul> <li>FourCC: <code>DATA</code></li> <li>Region: Six 4-byte signed integers (lowerX, lowerY, lowerZ, upperX, upperY, upperZ)</li> <li>Voxel Information: For each voxel in the region:<ul> <li>Air: 1-byte boolean (true if air, false if solid)</li> <li>Color: 1-byte unsigned integer (only if not air) (Color palette index)</li> <li>Normal: 1-byte unsigned integer (only if not air) (Normal palette index)</li> </ul> </li> </ul> <p>The voxel data is stored like this:</p> <pre><code>for(x = mins.x; x &lt;= maxs.x; ++x)\n for(y = mins.y; y &lt;= maxs.y; ++y)\n  for(z = mins.z; z &lt;= maxs.z; ++z)\n   writeVoxelInformation(x, y, z)\n</code></pre>"},{"location":"FormatSpec/#palette-colors","title":"Palette Colors","text":"<p>Palette colors are stored in the <code>PALC</code> chunk (or in <code>PALI</code> - see below):</p> <ul> <li>FourCC: <code>PALC</code></li> <li>Palette Name: String (16-bit length prefix, followed by UTF-8 encoded string)</li> <li>Color Count: 4-byte unsigned integer</li> <li>Colors: For each color:<ul> <li>ABGR: 4-byte unsigned integer</li> </ul> </li> <li>Emit Colors: For each color (deprecated):<ul> <li>ABGR: 4-byte unsigned integer (always 0)</li> </ul> </li> <li>Indices: For each color:<ul> <li>Index: 1-byte unsigned integer</li> </ul> </li> <li>Color Names: For each color:<ul> <li>Name: String (16-bit length prefix, followed by UTF-8 encoded string)</li> </ul> </li> <li>Material Count: 4-byte unsigned integer</li> <li>Materials: For each material:<ul> <li>Type: 4-byte unsigned integer</li> <li>Property Count: 1-byte unsigned integer</li> <li>Properties: For each property:<ul> <li>Name: String (16-bit length prefix, followed by UTF-8 encoded string)</li> <li>Value: 4-byte float</li> </ul> </li> </ul> </li> </ul>"},{"location":"FormatSpec/#palette-normals","title":"Palette Normals","text":"<p>Palette normals are stored in the <code>PALN</code> chunk:</p> <ul> <li>FourCC: <code>PALN</code></li> <li>Normal Count: 4-byte unsigned integer</li> <li>Normals: For each color:<ul> <li>ABGR: 4-byte unsigned integer</li> </ul> </li> </ul>"},{"location":"FormatSpec/#palette-identifier","title":"Palette Identifier","text":"<p>Palette identifier is stored in the <code>PALI</code> chunk.</p> <p>Note: This is only used if the palette is a built-in vengi [palette] (Palette.md) - otherwise the <code>PALC</code> chunk is used.</p> <ul> <li>FourCC: <code>PALI</code></li> <li>Palette Name: String (16-bit length prefix, followed by UTF-8 encoded string)</li> </ul> <p>This is used for internal palettes.</p>"},{"location":"FormatSpec/#animations","title":"Animations","text":"<p>Animations are stored in the <code>ANIM</code> chunk:</p> <ul> <li>FourCC: <code>ANIM</code></li> <li>Animation Name: String (16-bit length prefix, followed by UTF-8 encoded string)</li> <li>Keyframes: Each keyframe starts with the <code>KEYF</code> chunk:<ul> <li>FourCC: <code>KEYF</code></li> <li>Frame Index: 4-byte unsigned integer</li> <li>Long Rotation: 1-byte boolean</li> <li>Interpolation Type: String (16-bit length prefix, followed by UTF-8 encoded string)</li> <li>Local Matrix: Sixteen 4-byte floats (4x4 matrix in column-major order)</li> </ul> </li> </ul> <p>The end of the animation chunk is marked by the <code>ENDA</code> FourCC.</p>"},{"location":"Formats/","title":"Formats","text":""},{"location":"Formats/#voxel-formats","title":"Voxel formats","text":"<p>The vengi format is the best supported format. Saving into any other format might lose several details from your scene. This depends on the capabilities of the format and the completeness of the implementation for supporting that particular format.</p> Name Extension Loading Saving Thumbnails Palette Animations AceOfSpades kv6 X X X AceOfSpades vxl X X X AnimaToon scn X X aseprite aseprite X X BenVoxel ben.json X X X BinVox binvox X X Build engine kvx X X X Chronovox csm X CubeWorld cub X X X Cubzh 3zh X X X X Cubzh World b64 X Goxel gox X X X X Goxel txt txt X X KenShape kenshape X X Luanti (Minetest) mts X X X MagicaVoxel vox X X X Magicavoxel XRAW xraw X X X Minecraft level dat dat X Minecraft mcworld mcworld X Minecraft region mca X X Minecraft schematic schematic X X X Minecraft skin mcskin X X X Nicks Voxel Model nvm X Particubes pcubes X X X X Portable Network Graphics png X X Qubicle Binary qb X X X Qubicle Binary Tree qbt X X X Qubicle Exchange qef X X Qubicle Project qbcl X X X X Rooms.xyz Thing thing X X Sandbox VoxEdit Block vxb X X X Sandbox VoxEdit Collection vxc X X Sandbox VoxEdit Hierarchy vxr X X X Sandbox VoxEdit Model vxm X X X Sandbox VoxEdit Tilemap vxt X SLAB6 vox vox X X X SpriteStack zip X X X Sproxel csv csv X X X StarMade Blueprint sment X X StarMade Template smtpl X X X Tiberian Sun vxl X X X X Veloren terrain dat X X X Vengi vengi X X X X Voxel3D v3a X X VoxelBuilder vbx X VoxelMax vmax.zip X X X"},{"location":"Formats/#mesh-formats","title":"Mesh formats","text":"Name Extension Loading Saving Animations Autodesk 3D Studio 3ds X Blockbench bbmodel X FBX fbx X X GL Transmission Format gltf X X X Godot Scene escn X Polygon File Format ply X X Quake 1 bsp X Quake 1 Model mdl X Quake 2 Model md2 X Quake Map map X Standard Triangle Language stl X X UFO:Alien Invasion bsp X Wavefront Object obj X X <p>Point cloud support for <code>ply</code> and <code>gtlf</code> is implemented, too.</p>"},{"location":"Formats/#palettes","title":"Palettes","text":"Name Extension Loading Saving Adobe Color Bock acb X X Adobe Swatch Exchange ase X X Avoyd Material avmt X X CSV Palette csv X X Gimp Palette gpl X X JASC Palette pal X X Paint.NET Palette txt X X Photoshop Palette aco X X Pixelorama json X X Portable Network Graphics png X X Qubicle Palette qsm X RGB Palette pal X X Tiberian Sun Palette vpl X <p>The <code>gpl</code> format also supports the Aseprite extension for alpha values</p>"},{"location":"Formats/#imagestextures","title":"Images/textures","text":"Name Extension Bitmap bmp DDS dds Graphics Interchange Format gif JPEG jpeg Photoshop psd PKM pkm Portable Anymap pnm Portable Network Graphics png PVR pvr Radiance rgbE hdr Softimage PIC pic Targa image file tga"},{"location":"LUAScript/","title":"Scripting api","text":"<p>There is a console command (called <code>xs</code>) in voxedit and a command line parameter in voxconvert to execute lua scripts for generating voxels. This command expects the lua script filename (<code>.lua</code> can be omitted) and the additional arguments for the <code>main()</code> method.</p> <p>If you are new to lua you can read more about it on lua-users.</p> <p>voxedit</p> <p>Calling <code>xs &lt;script&gt; help</code> (in the script console) will print the supported arguments for the given script file in voxedit.</p> <p>voxconvert</p> <p><code>./vengi-voxconvert --script \"&lt;script&gt; help\" --scriptcolor 1 --input in.qb --output out.qb</code></p> <p><code>--scriptcolor</code> defines the color palette index that is given to the script as parameter.</p> <p>By default the script files will be searched in a <code>scripts</code> folder next to where the binary is located and in the usual search paths (see configuration for more details). You can also give the full path to the script file.</p> <p>There are two functions in each script. One is called <code>arguments</code> and one <code>main</code>. <code>arguments</code> returns a list of parameters for the <code>main</code> function. The default parameters for <code>main</code> are <code>node</code>, <code>region</code> and <code>color</code>. <code>color</code> is the palette index starting from <code>0</code> (the selected color in the palette panel in <code>voxedit</code> or the specified color index in <code>voxconvert</code> as given by <code>--scriptcolor</code>).</p> <p>So the first few parameters are the same for each script call. And the script defines any additional parameter for the <code>main</code> function by returing values in the <code>arguments</code> function.</p>"},{"location":"LUAScript/#examples","title":"Examples","text":""},{"location":"LUAScript/#without-parameters","title":"Without parameters","text":"<pre><code>function main(node, region, color)\n    local volume = node:volume()\n    local mins = region:mins()\n    local maxs = region:maxs()\n    for x = mins.x, maxs.x do\n        for y = mins.y, maxs.y do\n            for z = mins.z, maxs.z do\n                volume:setVoxel(x, y, z, color)\n            end\n        end\n    end\nend\n</code></pre> <p>Execute this via console <code>xs scriptfile</code></p>"},{"location":"LUAScript/#with-one-parameter","title":"With one parameter","text":"<pre><code>function arguments()\n    return {\n        { name = 'n', desc = 'height level delta', type = 'int', default = '2' }\n    }\nend\n\nfunction main(node, region, color, n)\n    [...]\nend\n</code></pre> <p>Execute this via console <code>xs scriptfile 1</code> where <code>1</code> will be the value of <code>n</code>. Omitting the <code>1</code> will add the <code>default</code> value from the argument list.</p>"},{"location":"LUAScript/#download-a-file-and-import-it","title":"Download a file and import it","text":"<pre><code>local function basename(str)\n    local name = string.gsub(str, \"(.*/)(.*)\", \"%2\")\n    return name\nend\n\nfunction main(_, _, _)\n    local url = \"https://github.com/vengi-voxel/vengi/raw/9c101f32b84f949ed82f7545883e80a318760580/data/voxel/guybrush.vox\"\n    local filename = basename(url)\n    local stream = g_http.get(url)\n    g_import.scene(filename, stream)\nend\n</code></pre>"},{"location":"LUAScript/#find-the-best-palette-match","title":"Find the best palette match","text":"<pre><code>function main(node, region, color)\n    -- find match (palette index) for red in the current palette (RGB value)\n    -- this value can be used in e.g. volume:setVoxel(x, y, z, match)\n    local match = node:palette():match(255, 0, 0)\n    [...]\nend\n</code></pre> <p>This will find the best match in the currently used palette and return the index.</p>"},{"location":"LUAScript/#arguments","title":"Arguments","text":"<p>Supported <code>type</code>s are:</p> <ul> <li> <p><code>int</code>: <code>min</code>, <code>max</code> values are supported, too</p> </li> <li> <p><code>float</code>: <code>min</code>, <code>max</code> values are supported, too</p> </li> <li> <p><code>enum</code>: <code>enum</code> as a property specifies a list of string separated by <code>,</code></p> </li> <li> <p><code>str</code>: string input</p> </li> <li> <p><code>colorindex</code>: a color index from current palette (clamped)</p> </li> <li> <p><code>bool</code>:</p> </li> </ul> <p>The <code>desc</code>ription field is just for the user interface of the script parameter list.</p> <p>A <code>default</code> value can get set, too.</p> <p>The order in the arguments table defines the order in which the arguments are passed over to the script.</p>"},{"location":"LUAScript/#scenegraph","title":"SceneGraph","text":"<p><code>g_scenegraph</code> lets you access different nodes or create new ones.</p> <p>The functions are:</p> <ul> <li> <p><code>align()</code>: Allow to align all nodes on the floor next to each other without overlapping.</p> </li> <li> <p><code>new(name, [region], [visible], [type=group])</code>: Creates a new node with the given <code>name</code>, the size and position according to the <code>region</code> and an optional <code>visible</code> parameter. If <code>region</code> is given a model is created - otherwise a group node. Valid values for <code>type</code> are <code>group</code>, <code>point</code> and <code>camera</code> (the default is <code>group</code>).</p> </li> <li> <p><code>get([nodeId])</code>: Returns the <code>node</code> for the given <code>nodeId</code> - if the <code>nodeId</code> is not given, it will return the current active node. Which by default is the node for the volume the script is currently executed for.</p> </li> <li> <p><code>getByName(name)</code>: Returns <code>nil</code> if no node with the given name exists</p> </li> <li> <p><code>getByUUID(uuid)</code>: Returns <code>nil</code> if no node with the given uuid exists</p> </li> <li> <p><code>activeAnimation()</code>: Return the current active animation</p> </li> <li> <p><code>setAnimation(string)</code>: Activate the animation</p> </li> <li> <p><code>addAnimation(string)</code>: Add a new animation</p> </li> <li> <p><code>duplicateAnimation(animation, newAnimationName)</code>: Add a new animation by duplicating the given animation</p> </li> <li> <p><code>hasAnimation(string)</code>: Check if the animation exists</p> </li> <li> <p><code>nodeIds()</code>: Returns a table with all node ids of the current scene graph.</p> </li> </ul> <pre><code>local allNodeIds = g_scenegraph.nodeIds()\nfor i, nodeId in ipairs(allNodeIds) do\n  -- Do something with each nodeId\nend\n</code></pre> <ul> <li><code>updateTransforms()</code>: Update the key frame transforms when they are dirty after changing values (see <code>Keyframe</code>)</li> </ul>"},{"location":"LUAScript/#scenegraphnode","title":"SceneGraphNode","text":"<ul> <li> <p><code>addAnimation(string)</code>: Add a new animation</p> </li> <li> <p><code>addKeyFrame(frame)</code>: Add a new key frame for frame number and return it. E.g. <code>addFrame(20)</code> will add a new key frame for the frame 20.</p> </li> <li> <p><code>hasKeyFrameForFrame(frame)</code>:</p> </li> <li> <p><code>id()</code>: Returns the id of the current node</p> </li> <li> <p><code>clone()</code>: Clones the current node</p> </li> <li> <p><code>uuid()</code>: Returns the uuid of the current node</p> </li> <li> <p><code>isCamera()</code>: Returns true if the node is a camera node</p> </li> <li> <p><code>isGroup()</code>: Returns true if the node is a group node</p> </li> <li> <p><code>isModel()</code>: Returns true if the node is a model node (it has a volume attached)</p> </li> <li> <p><code>isPoint()</code>: Returns true if the node is a point node</p> </li> <li> <p><code>isReference()</code>: Returns true if the node is a model reference</p> </li> <li> <p><code>isLocked()</code>:</p> </li> <li> <p><code>lock()</code>:</p> </li> <li> <p><code>unlock()</code>:</p> </li> <li> <p><code>isVisible()</code>:</p> </li> <li> <p><code>hide()</code>:</p> </li> <li> <p><code>unhide()</code>:</p> </li> <li> <p><code>property(key)</code>: Get the property for the given key.</p> </li> <li> <p><code>setProperty(key, value)</code>: If the property was changed or added, this returns <code>true</code> - <code>false</code> otherwise</p> </li> <li> <p><code>keyFrame(keyFrameIdx)</code>: Returns an existing keyframe (see below)</p> </li> <li> <p><code>keyFrameForFrame(frame)</code>: Returns an existing keyframe that has a frame number &lt;= the given frame</p> </li> <li> <p><code>name()</code>: Returns the current name of the node.</p> </li> <li> <p><code>setName(string)</code>: Set the name of the node.</p> </li> <li> <p><code>palette()</code>: Returns the current palette of the node.</p> </li> <li> <p><code>parent()</code>: Returns the id of the parent node - or <code>-1</code> if no parent exists (root node)</p> </li> <li> <p><code>removeKeyFrameForFrame(frame)</code>: Remove the keyframe for the given frame. Throws an error if no key frame with the given frame exists.</p> </li> <li> <p><code>removeKeyFrame(keyFrameIdx)</code>: Remove the existing key frame at the given index. Throws an error if the index is invalid or the key frame doesn't exist.</p> </li> <li> <p><code>setPalette(palette, [remap])</code>: Change the palette or if remap is given and is true it remaps to the new palette</p> </li> <li> <p><code>setPivot(vec3)</code>, <code>setPivot(x, y, z)</code>:</p> </li> <li> <p><code>volume()</code>: Gives you access to the volume of a model node.</p> </li> </ul> <p>Access these functions like this:</p> <pre><code>local scenegraphnode = [...]\nlocal name = scenegraphnode:name()\n</code></pre>"},{"location":"LUAScript/#keyframe","title":"Keyframe","text":"<p>Valid interpolation strings</p> <ul> <li>Instant</li> <li>Linear</li> <li>QuadEaseIn</li> <li>QuadEaseOut</li> <li>QuadEaseInOut</li> <li>CubicEaseIn</li> <li>CubicEaseOut</li> <li>CubicEaseInOut</li> </ul> <ul> <li> <p><code>index()</code>: Returns the key frame index</p> </li> <li> <p><code>frame()</code>: Returns the frame for this key frame object</p> </li> <li> <p><code>interpolation()</code>: Returns interpolation string</p> </li> <li> <p><code>setInterpolation(string)</code>: Set the interpolation for this key frame - must be a valid string</p> </li> <li> <p><code>localScale()</code>: Returns the local scale vector</p> </li> <li> <p><code>setLocalScale(vec3)</code>, <code>setLocalScale(x, y, z)</code>:</p> </li> <li> <p><code>localOrientation()</code>: Returns a quaternion object</p> </li> <li> <p><code>setLocalOrientation(quat)</code>, <code>setLocalOrientation(x, y, z, w)</code>:</p> </li> <li> <p><code>localTranslation()</code>: Returns a vec3 object</p> </li> <li> <p><code>setLocalTranslation(vec3)</code>, <code>setLocalTranslation(x, y, z)</code>:</p> </li> <li> <p><code>worldScale()</code>: Returns a vec3 object</p> </li> <li> <p><code>setWorldScale(vec3)</code>, <code>setWorldScale(x, y, z)</code>:</p> </li> <li> <p><code>worldOrientation()</code>: Returns a quaternion object</p> </li> <li> <p><code>setWorldOrientation(quat)</code>, <code>setWorldOrientation(x, y, z, w)</code>:</p> </li> <li> <p><code>worldTranslation()</code>: Returns a vec3 object</p> </li> <li> <p><code>setWorldTranslation(vec3)</code>, <code>setWorldTranslation(x, y, z)</code>:</p> </li> </ul> <p>NOTE After you've modified something on a key frame, you have to call <code>g_scenegraph.updateTransforms()</code>!</p>"},{"location":"LUAScript/#palette-and-material","title":"Palette and material","text":"<p>The node palette (<code>node:palette()</code>) has several methods to work with colors. E.g. to find a closest possible match for the given palette index.</p> <p>The functions are:</p> <ul> <li> <p><code>color(paletteIndex)</code>: Pushes the vec4 of the color behind the palette index (<code>0-255</code>) as float values between <code>0.0</code> and <code>1.0</code>.</p> </li> <li> <p><code>colorString(paletteIndex)</code>: Return a color string for logging to the console (includes ansi color escape sequences).</p> </li> <li> <p><code>rgba(paletteIndex)</code>: Pushes the four values of the color behind the palette index (<code>0-255</code>).</p> </li> <li> <p><code>colors()</code>: Returns the palette RGBA colors as vec4 values between <code>0.0</code> and <code>1.0</code>.</p> </li> <li> <p><code>deltaE(paletteIndex1, paletteIndex2)</code>: Compute Delta E (CIE76)</p> <ul> <li><code>&lt;= .0</code>: Imperceptible</li> <li><code>1-</code>: Noticeable on close inspection</li> <li><code>2-1</code>: Perceptible at a glance</li> <li><code>11-4</code>: Distinct but related colors</li> <li><code>50-10</code>: Completely different colors</li> </ul> </li> <li> <p><code>load(palette)</code>: Allows to load a built-in palette or a filename to a supported palette format.</p> </li> <li> <p><code>material(paletteIndex, material)</code>: Get the value of the material property for the given palette index.</p> <p>Valid material names</p> </li> <li> <p><code>match(r, g, b, [skipIndex])</code>: Returns the closest possible palette color match for the given RGB (<code>0-255</code>) color. The returned palette index is in the range <code>0-255</code>. This value can then be used for the <code>setVoxel</code> method. <code>skipIndex</code> is not taken into account when doing the search.</p> </li> <li> <p><code>setColor(paletteIndex, red, green, blue, [alpha])</code>: Change the color of a palette entry to the given rgba values in the range <code>[0-255]</code>.</p> </li> <li> <p><code>setMaterial(paletteIndex, material, value)</code>: Set the value of the material property for the given palette index.</p> <p>Valid material names</p> </li> <li> <p><code>similar(paletteindex, [coloramount])</code>: Return a table with similar colors given by their palette index.</p> </li> </ul> <p>They are available as e.g. <code>palette:color([...])</code>, <code>palette:match([...])</code> and so on.</p> <p>You can create new palettes with the <code>g_palette</code> global by calling e.g.</p> <pre><code>local pal = g_palette.new()\npal:load(\"built-in:minecraft\")\n</code></pre>"},{"location":"LUAScript/#noise","title":"Noise","text":"<p>The global <code>g_noise</code> supports a few noise generators:</p> <ul> <li> <p><code>noise2(v)</code>, <code>noise3(v)</code>, <code>noise4(v)</code>: Simplex noise. Uses the given <code>vec2</code>, <code>vec3</code> or <code>vec4</code> and returns a float value between <code>0.0</code> and <code>1.0</code>.</p> </li> <li> <p><code>fBm2(v, octaves, lacunarity, gain)</code>, <code>fBm3(v, octaves, lacunarity, gain)</code>, <code>fBm4(v, octaves, lacunarity, gain)</code>: Simplex noise fractal brownian motion sum. Uses the given <code>vec2</code>, <code>vec3</code> or <code>vec4</code> and returns a float value between <code>0.0</code> and <code>1.0</code>.</p> </li> <li> <p><code>ridgedMF2(v, offset, octaves, lacunarity, gain)</code>, <code>ridgedMF3(v, offset, octaves, lacunarity, gain)</code>, <code>ridgedMF4(v, offset, octaves, lacunarity, gain)</code>: Simplex ridged multi-fractal noise sum. Uses the given <code>vec2</code>, <code>vec3</code> or <code>vec4</code> and returns a float value between <code>0.0</code> and <code>1.0</code>.</p> </li> <li> <p><code>swissTurbulence(vec2, offset, octaves, lacunarity, gain, warp)</code>: blog post</p> </li> <li> <p><code>voronoi(vec3, [frequency, seed, enableDistance])</code>: Voronoi noise.</p> </li> <li> <p><code>worley2(v)</code>, <code>worley3(v)</code>: Simplex cellular/worley noise. Uses the given <code>vec2</code> or <code>vec3</code> and returns a float value between <code>0.0</code> and <code>1.0</code>.</p> </li> </ul> <p>They are available as e.g. <code>g_noise.noise2([...])</code>, <code>g_noise.fBm3([...])</code> and so on.</p>"},{"location":"LUAScript/#shape","title":"Shape","text":"<p>The global <code>g_shape</code> supports a few shape generators:</p> <ul> <li> <p><code>cylinder(centerBottom, axis, radius, height, voxel)</code>: Create a cylinder at the given position. The position is the center of the bottom plate with the given <code>axis</code> (<code>y</code> is default) as the direction.</p> </li> <li> <p><code>torus(center, minorRadius, majorRadius, voxel)</code>: Create a torus at the given position with the position being the center of the object.</p> </li> <li> <p><code>ellipse(centerBottom, axis, width, height, depth, voxel)</code>: Create an ellipse at the given position. The position is the center of the bottom plate with the given <code>axis</code> (<code>y</code> is default) as the direction.</p> </li> <li> <p><code>dome(centerBottom, axis, negative, width, height, depth, voxel)</code>: Create a dome at the given position. The position is the center of the bottom plate with the given <code>axis</code> (<code>y</code> is default) as the direction. <code>negative</code>: if true the dome will be placed in the negative direction of the axis.</p> </li> <li> <p><code>cone(centerBottom, axis, negative, width, height, depth, voxel)</code>: Create a cone at the given position. The position is the center of the bottom plate with the given <code>axis</code> (<code>y</code> is default) as the direction. <code>negative</code>: if true the cone will be placed in the negative direction of the axis.</p> </li> <li> <p><code>line(start, end, voxel)</code>: Create a line.</p> </li> <li> <p><code>cube(position, width, height, depth, voxel)</code>: Create a cube with the given dimensions. The position is the lower left corner.</p> </li> <li> <p><code>bezier(start, end, control, voxel)</code>: Create a bezier curve with the given <code>start</code>, <code>end</code> and <code>control</code> point</p> </li> </ul> <p>They are available as e.g. <code>g_shape.line([...])</code>, <code>g_shape.ellipse([...])</code> and so on.</p>"},{"location":"LUAScript/#region","title":"Region","text":"<ul> <li> <p><code>contains(region)</code>: Check whether the current region contains the given one. The test is inclusive such that a region is considered to be inside of itself.</p> </li> <li> <p><code>intersects(region)</code>: Check whether the current region intersects with the given one.</p> </li> <li> <p><code>mins()</code>: The lower boundary of the region (inclusive).</p> </li> <li> <p><code>maxs()</code>: The upper boundary of the region (inclusive).</p> </li> <li> <p><code>size()</code>: The size of the region in voxels (<code>ivec3</code>).</p> </li> <li> <p><code>setMins(mins)</code>: The lower boundary of the region - given as <code>ivec3</code> (atm only available for palettes created with <code>new</code>).</p> </li> <li> <p><code>setMaxs(maxs)</code>: The upper boundary of the region - given as <code>ivec3</code> (atm only available for palettes created with <code>new</code>).</p> </li> <li> <p><code>isOnBorder(pos)</code>: Checks whether the given <code>ivec3</code> is located on the border of the region.</p> </li> <li> <p><code>x()</code>: The lower x boundary of the region.</p> </li> <li> <p><code>y()</code>: The lower y boundary of the region.</p> </li> <li> <p><code>z()</code>: The lower z bounary of the region.</p> </li> <li> <p><code>width()</code>: The width of the region measured in voxels.</p> </li> <li> <p><code>height()</code>: The height of the region measured in voxels.</p> </li> <li> <p><code>depth()</code>: The depth of the region measured in voxels.</p> </li> </ul> <p>Access these functions like this:</p> <pre><code>local region = [...]\nlocal mins = region:mins()\n</code></pre> <p>To create new regions, you can use the <code>g_region.new</code> function which needs the lower and upper boundaries. For example</p> <pre><code>local myregion = g_region.new(0, 0, 0, 1, 1, 1) -- creates a region with 8 voxels\n</code></pre> <pre><code>local myregion = g_region.new(0, 0, 0, 0, 0, 0) -- creates a region with 1 voxels\n</code></pre>"},{"location":"LUAScript/#volume","title":"Volume","text":"<ul> <li> <p><code>voxel(x, y, z)</code>: Returns the palette index of the voxel at the given position in the volume <code>[0-255]</code>. Or <code>-1</code> if there is no voxel.</p> </li> <li> <p><code>region()</code>: Return the region of the volume.</p> </li> <li> <p><code>text(ttffont, text, [x], [y], [z], [size=16], [thickness=1], [spacing=0])</code>: Renders the given <code>text</code>. <code>x</code>, <code>y</code>, and <code>z</code> are the region lower boundary coordinates by default.</p> </li> <li> <p><code>fillHollow([color])</code>: Tries to fill all hollows in the volume.</p> </li> <li> <p><code>hollow()</code>: Removes non visible voxels.</p> </li> <li> <p><code>importHeightmap(filename, [underground], [surface])</code>: Imports the given image as heightmap into the current volume. Use the <code>underground</code> and <code>surface</code> voxel colors for this (or pick some defaults if they were not specified). Also see <code>importColoredHeightmap</code> if you want to colorize your surface.</p> </li> <li> <p><code>importColoredHeightmap(filename, [underground])</code>: Imports the given image as heightmap into the current volume. Use the <code>underground</code> voxel colors for this and determine the surface colors from the RGB channel of the given image. Other than with <code>importHeightmap</code> the height is encoded in the alpha channel with this method.</p> </li> <li> <p><code>importImageAsVolume(filename, [filename_depthmap], [palette], [depth], [bothsides])</code>: Imports the given image as volume with the depth values read from the given depth map image file. If no <code>filename_depthmap</code> is given we are looking for the the same filename as given via <code>filename</code> but with a <code>-dm</code> as postfix. Example: <code>filename</code> is <code>foo.png</code> - then the default <code>filename_depthmap</code> is <code>foo-dm.png</code>.</p> </li> <li> <p><code>crop()</code>: Crop the volume and remove empty spaces.</p> </li> <li> <p><code>mirrorAxis([axis])</code>: Mirror along the given axis - <code>y</code> is default.</p> </li> <li> <p><code>move(x, [y], [z])</code>: Move the voxels by the given units without modifying the boundaries of the volume.</p> </li> <li> <p><code>rotateAxis([axis])</code>: Rotate along the given axis - <code>y</code> is default.</p> </li> <li> <p><code>translate(x, [y, z])</code>: Translates the region of the volume. Keep in mind that this is not supported by every output format.</p> </li> <li> <p><code>resize(x, [y, z, extendMins])</code>: Resize the volume by the given sizes. If <code>extendsMins</code> is <code>true</code> the region dimensions are also increased on the lower corner.</p> </li> <li> <p><code>setVoxel(x, y, z, color)</code>: Set the given color at the given coordinates in the volume. <code>color</code> must be in the range <code>[0-255]</code> or <code>-1</code> to delete the voxel.</p> </li> </ul> <p>Access these functions like this:</p> <pre><code>local volume = [...]\nlocal region = volume:region()\n</code></pre>"},{"location":"LUAScript/#vectors","title":"Vectors","text":"<p>Available vector types are <code>vec2</code>, <code>vec3</code>, <code>vec4</code> and their integer types <code>ivec2</code>, <code>ivec3</code>, <code>ivec4</code>.</p> <p>Access these functions like this:</p> <pre><code>local v1 = g_ivec3.new(1, 1, 1)\n</code></pre> <p>There are 3 possible components for this vector. You can also call <code>g_ivec3.new(1)</code> to fill all three values with a one. Or call it like this: <code>g_ivec3.new(1, 2)</code> to create a vector with the three components of <code>1, 2, 2</code>.</p>"},{"location":"LUAScript/#quaternion","title":"Quaternion","text":"<p>For creating quaternions, you can use <code>g_quat.new()</code></p> <ul> <li> <p><code>rotateXYZ(x, y, z)</code>: Rotates the object along the X, Y, and Z axes by the specified angles.</p> </li> <li> <p><code>rotateXY(x, y)</code></p> </li> <li> <p><code>rotateYZ(y, z)</code></p> </li> <li> <p><code>rotateXZ(x, z)</code></p> </li> <li> <p><code>rotateX(x)</code>: Rotates the object along the X axis by the specified angle.</p> </li> <li> <p><code>rotateY(y)</code>: Rotates the object along the Y axis by the specified angle.</p> </li> <li> <p><code>rotateZ(z)</code>: Rotates the object along the Z axis by the specified angle.</p> </li> </ul>"},{"location":"LUAScript/#algorithms","title":"Algorithms","text":"<p>The global <code>g_algorithm</code> provides general purpose algorithms:</p> <ul> <li> <p><code>genland(...)</code>: A function to generate a land mass with the given parameters. You can find the parameters in the <code>genland.lua</code> script file in the <code>scripts</code> folder.</p> </li> <li> <p><code>shadow(lightstep = 8)</code>: A function to generate a shadow map for the given node and applies it to the volume.</p> </li> </ul>"},{"location":"LUAScript/#http","title":"HTTP","text":"<p>You can perform http requests from within the lua script to query apis or download files</p> <pre><code>local stream, responseHeaders = g_http.get(\"https://example.localhost\")\nlocal str = stream:readString()\nprint(str)\nfor k, v in pairs(responseHeaders) do\n    print(\"key: \" .. k .. \", value: \" .. v)\nend\n</code></pre> <pre><code>local requestHeaders = {}\nlocal stream, responseHeaders = g_http.get(\"https://example.localhost\", requestHeaders)\n</code></pre> <pre><code>local body = \"my body\"\nlocal stream, responseHeaders = g_http.post(\"https://example.localhost\", body)\nlocal str = stream:readString()\nprint(str)\nfor k, v in pairs(responseHeaders) do\n    print(\"key: \" .. k .. \", value: \" .. v)\nend\n</code></pre> <ul> <li> <p><code>post(url, body, headers</code>: Execute a post request</p> </li> <li> <p><code>get(url, headers)</code>: Execute a get request</p> </li> </ul>"},{"location":"LUAScript/#importer","title":"Importer","text":"<p><code>g_import</code> is a global that offers the ability to load images and palettes or imports scene graphs/formats from e.g. http downloads.</p> <ul> <li> <p><code>image(filename, stream)</code>: Returns an image that was loaded.</p> </li> <li> <p><code>palette(filename, stream)</code>: Returns a palette that was loaded.</p> </li> <li> <p><code>scene(filename, stream)</code>: Imports the scene from the given stream into the existing scene (<code>g_scenegraph</code>).</p> </li> <li> <p><code>imageAsPlane(image, palette, [thickness])</code>: Imports the given image as plane into the current scene graph and returns the node.</p> </li> </ul> <pre><code>function main(node, region, color)\n    local pal = g_palette.new()\n    pal:load(\"built-in:nippon\")\n    local stream = g_io.sysopen(\"yourimage.png\")\n    local image = g_import.image(\"somename\", stream)\n    g_import.imageAsPlane(image, pal)\nend\n</code></pre>"},{"location":"LUAScript/#image","title":"Image","text":"<p>Images are loaded by the <code>g_import</code> global.</p> <ul> <li> <p><code>name()</code>: Returns the name of the image</p> </li> <li> <p><code>save(filename)</code>: Save the image as file (<code>png</code> and <code>jpeg</code>)</p> </li> </ul>"},{"location":"LUAScript/#streams","title":"Streams","text":"<p>When using e.g. the <code>g_http</code> requests, you get stream objects as return values.</p> <ul> <li> <p><code>readString([0-terminated:false])</code>: Reads a string from the stream. If the optional parameter <code>0-terminated</code> is set to <code>true</code>, it reads until a null character is encountered otherwise it will read the whole stream as a string.</p> </li> <li> <p><code>readUInt8()</code>: Reads an unsigned 8-bit integer from the stream.</p> </li> <li> <p><code>readInt8()</code>: Reads a signed 8-bit integer from the stream.</p> </li> <li> <p><code>readUInt16()</code>: Reads an unsigned 16-bit integer from the stream.</p> </li> <li> <p><code>readInt16()</code>: Reads a signed 16-bit integer from the stream.</p> </li> <li> <p><code>readUInt32()</code>: Reads an unsigned 32-bit integer from the stream.</p> </li> <li> <p><code>readInt32()</code>: Reads a signed 32-bit integer from the stream.</p> </li> <li> <p><code>readUInt64()</code>: Reads an unsigned 64-bit integer from the stream.</p> </li> <li> <p><code>readInt64()</code>: Reads a signed 64-bit integer from the stream.</p> </li> <li> <p><code>readFloat()</code>: Reads a 32-bit floating-point number from the stream.</p> </li> <li> <p><code>readDouble()</code>: Reads a 64-bit floating-point number from the stream.</p> </li> <li> <p><code>writeString(str, [0-terminated:false])</code>: Writes a string to the stream. If the optional parameter <code>0-terminated</code> is set to <code>true</code>, it writes a null character at the end of the string.</p> </li> <li> <p><code>writeUInt8(value)</code>: Writes an unsigned 8-bit integer to the stream.</p> </li> <li> <p><code>writeInt8(value)</code>: Writes a signed 8-bit integer to the stream.</p> </li> <li> <p><code>writeUInt16(value)</code>: Writes an unsigned 16-bit integer to the stream.</p> </li> <li> <p><code>writeInt16(value)</code>: Writes a signed 16-bit integer to the stream.</p> </li> <li> <p><code>writeUInt32(value)</code>: Writes an unsigned 32-bit integer to the stream.</p> </li> <li> <p><code>writeInt32(value)</code>: Writes a signed 32-bit integer to the stream.</p> </li> <li> <p><code>writeUInt64(value)</code>: Writes an unsigned 64-bit integer to the stream.</p> </li> <li> <p><code>writeInt64(value)</code>: Writes a signed 64-bit integer to the stream.</p> </li> <li> <p><code>writeFloat(value)</code>: Writes a 32-bit floating-point number to the stream.</p> </li> <li> <p><code>writeDouble(value)</code>: Writes a 64-bit floating-point number to the stream.</p> </li> <li> <p><code>writeStream(stream)</code>: Write the data of the given stream to the current stream.</p> </li> <li> <p><code>eos()</code>: returns whether the stream has reached its end</p> </li> <li> <p><code>seek(offset, mode)</code>: change the position in the stream</p> </li> <li> <p><code>tell()</code>: returns the current position in the stream</p> </li> <li> <p><code>pos()</code>: alias for <code>tell()</code></p> </li> <li> <p><code>close()</code>: close the stream and garbage collect (also closes the file - important on windows if you are going to continue to use the same file again)</p> </li> <li> <p><code>size()</code>: returns the size of the stream</p> </li> </ul>"},{"location":"LUAScript/#io","title":"IO","text":"<p><code>g_io</code> can open files for reading and writing and will return a stream instance.</p> <ul> <li> <p><code>sysopen(path, mode)</code>: Can be used to open either an absolute path or a path relative to the current working directory. Modes are <code>r</code> and <code>w</code>, default is <code>r</code>.</p> </li> <li> <p><code>open(path, mode)</code>: Will open the file in the home path of the user to read and write files. Modes are <code>r</code> and <code>w</code>, default is <code>r</code>.</p> </li> </ul>"},{"location":"LUAScript/#cvar","title":"Cvar","text":"<pre><code>g_var.int(\"cl_gamma\")\n</code></pre> <ul> <li> <p><code>create(name, value, help = nil, nopersist = false, secret = false)</code>: Create a new cvar that is persisted by default.</p> </li> <li> <p><code>str()</code>: Returns the string value of the cvar</p> </li> <li> <p><code>bool()</code>: Returns the bool value of the cvar</p> </li> <li> <p><code>int()</code>: Returns the int value of the cvar</p> </li> <li> <p><code>float()</code>: Returns the float values of the cvar</p> </li> <li> <p><code>setStr(value: string)</code>: Sets the string value of the cvar</p> </li> <li> <p><code>setBool(value: bool)</code>: Sets the bool value of the cvar</p> </li> <li> <p><code>setInt(value: number)</code>: Sets the int value of the cvar</p> </li> <li> <p><code>setFloat(value: number)</code>: Sets the float values of the cvar</p> </li> </ul> <p>To get a full list of cvars use the console command <code>cvarlist</code>.</p>"},{"location":"LUAScript/#command","title":"Command","text":"<pre><code>g_cmd.execute(\"echo test\")\n</code></pre> <ul> <li><code>execute(cmdline: string)</code>: Execute any of the known commands</li> </ul> <p>To get a full list of commands use the console command <code>cmdlist</code>.</p>"},{"location":"LUAScript/#logging","title":"Logging","text":"<p>To use the built-in logging facilities use <code>g_log</code> with <code>info</code>, <code>debug</code>, <code>warn</code> and <code>error</code></p>"},{"location":"LUAScript/#system","title":"System","text":"<p>The system module is available with <code>g_sys</code> - and includes the following functions</p> <ul> <li><code>sleep(ms)</code>: Sleep the given milliseconds</li> </ul>"},{"location":"LUAScript/#other-useful-information","title":"Other useful information","text":"<ul> <li><code>y</code> going upwards - see basics for further details.</li> </ul>"},{"location":"LUAScript/#available-scripts","title":"Available scripts","text":""},{"location":"LUAScript/#animatelua","title":"animate.lua","text":"<p>Add animations to an existing model if you name the nodes properly.</p> <p><code>xs animate.lua</code></p>"},{"location":"LUAScript/#coverlua","title":"cover.lua","text":"<p>Generates a new voxel on top of others with the current selected color and the specified height.</p> <p></p> <p><code>xs cover.lua 1</code></p>"},{"location":"LUAScript/#grasslua","title":"grass.lua","text":"<p>Generate grass on top of voxels.</p> <p></p> <p><code>xs grass.lua</code></p>"},{"location":"LUAScript/#gridlua","title":"grid.lua","text":"<p>Generates a grid with given color, thickness and size.</p> <p></p> <p><code>xs grid.lua 1 1 5 5 5</code></p>"},{"location":"LUAScript/#noiselua","title":"noise.lua","text":"<p>Generates perlin noise with the frequency and amplitude as parameters with the current selected color.</p> <p></p> <p><code>xs noise.lua 0.3 1.0</code></p>"},{"location":"LUAScript/#pyramidlua","title":"pyramid.lua","text":"<p>Generates a pyramid with the current selected color and with each level being 3 voxels high.</p> <p></p> <p><code>xs pyramid.lua 3</code></p>"},{"location":"LUAScript/#thickenlua","title":"thicken.lua","text":"<p>Thickens the voxel - take 1 voxel and convert to 8 voxels (creates a new node for the result).</p> <p> </p> <p><code>xs thicken.lua 1</code></p>"},{"location":"LUAScript/#others","title":"others","text":"<p>There are other scripts available in the repository.</p>"},{"location":"LUAScript/#available-modules","title":"Available modules","text":""},{"location":"LUAScript/#volumelua","title":"volume.lua","text":"<p>This module is here to ease the process of visiting all the voxels in a volume</p> <p>Keep in mind the <code>-1</code> is an empty voxel</p> <pre><code>local vol = require \"modules.volume\"\n\nfunction main(node, region, color, emptycnt, octaves, lacunarity, gain, threshold)\n    local visitor = function (volume, x, y, z)\n        local color = volume:voxel(x, y, z)\n        if color == -1 then\n            -- empty voxel\n        else\n            -- solid voxel\n        end\n    end\n\n    local condition = function (volume, x, y, z)\n        -- add your checks here\n        return true\n    end\n    vol.conditionYXZ(node:volume(), region, visitor, condition)\nend\n</code></pre>"},{"location":"Material/","title":"Material","text":"<p>Each color entry in the palette can have several material properties. Most of them are not handled in the vengi renderers, but can be useful when exporting the voxels to other formats.</p>"},{"location":"Material/#materials","title":"Materials","text":"<p>The material support in vengi is modelled after magicavoxel.</p> <p>The following material names are imported from magicavoxel and a few of them are exported to the GLTF-format.</p> Material name GLTF mapping <code>metal</code> pbrMetallicRoughness <code>roughness</code> KHR_materials_pbrSpecularGlossiness, pbrMetallicRoughness <code>specular</code> KHR_materials_specular <code>indexOfRefraction</code> KHR_materials_ior <code>attenuation</code> KHR_materials_volume <code>flux</code> <code>emit</code> Emission texture <code>lowDynamicRange</code> <code>density</code> KHR_materials_pbrSpecularGlossiness <code>sp</code> <code>glossiness</code> KHR_materials_pbrSpecularGlossiness <code>media</code> <p>You can also modify these values via scripting.</p>"},{"location":"Material/#gltf-extensions","title":"GLTF extensions","text":"<p>Some of the material properties are exported to GLTF 2.0 or some of the extensions:</p> <ul> <li>KHR_materials_emissive_strength</li> <li>KHR_materials_ior</li> <li>KHR_materials_volume</li> <li>KHR_materials_pbrSpecularGlossiness</li> <li>KHR_materials_specular</li> </ul>"},{"location":"Palette/","title":"Palette","text":"<p>The engine is built around a palette of 256 colors. Custom palettes are supported. The images should have a 1x256 pixel dimension.</p> <p>You can import palettes from a lot of different image, palette or voxel volume formats (if supported).</p> <p>Each color entry can get material properties.</p> <p>The palette can usually be specified by the cvar <code>palette</code> and can either be a full path to a png file or an identifier. If you decide to use the identifier - e.g. <code>nippon</code> the <code>palette</code> cvar is set to this value and the engine will automatically search all registered file system paths for a file named <code>palette-nippon.png</code>.</p> <p>There are several built-in palettes available that can also be used as an identifier.</p> <ul> <li><code>built-in:commandandconquer</code></li> <li><code>built-in:magicavoxel</code></li> <li><code>built-in:minecraft</code></li> <li><code>built-in:nippon</code></li> <li><code>built-in:quake1</code></li> <li><code>built-in:starmade</code></li> </ul> <p>You can also download and import palettes from Lospec by specifying a palette like this:</p> <ul> <li><code>lospec:paletteid</code></li> </ul> <p>This would try to download a palette with the id <code>paletteid</code> from lospec.com in the Gimp (<code>gpl</code>) format and automatically imports it.</p> <p>There are several color or palette related cvars available:</p> <ul> <li><code>voxformat_createpalette</code></li> <li><code>core_colorreduction</code></li> <li><code>palformat_maxsize</code></li> <li><code>palformat_gimprgba</code></li> <li><code>palformat_rgb6bit</code></li> </ul> <p>You can find the detailed description and more cvars by using e.g. the voxconvert <code>--help</code> parameter or checking the Configuration documentation.</p>"},{"location":"Palette/#normals","title":"Normals","text":"<p>Command &amp; Conquer supports voxel normals. <code>vengi-voxedit</code> got a few features to support this. Change the view mode to Command &amp; Conquer to see a normal palette panel and to be able to render the normals for the voxels.</p> <p>There is also a cvar called <code>normalpalette</code> that is used to set the normal palette when importing from meshes.</p> <p>There are several built-in palettes available that can also be used as an identifier.</p> <ul> <li><code>built-in:redalert2</code></li> <li><code>built-in:tiberiansun</code></li> <li><code>built-in:slab6</code></li> </ul> <p>You can also specify a filename to a support palette format to load it.</p>"},{"location":"Palette/#core_colorreduction","title":"core_colorreduction","text":"<p>Possible values are <code>Octree</code>, <code>Wu</code>, <code>NeuQuant</code>, <code>KMeans</code> and <code>MedianCut</code></p> <p>This cvar controls how the input colors are quantized in the palette colors.</p> <p>Different input images lead to different results for those options. If you are not pleased with the result on one algorithm, it's often worth the try with another one.</p>"},{"location":"Palette/#voxformat_rgbweightedaverage","title":"voxformat_rgbweightedaverage","text":"<p>If you are importing from a mesh format and multiple triangles with different colors would contribute to the same voxel, vengi will try to find the best color by doing an average weighting between all color contributions based on their size. This might lead to new colors - colors there are not part of the input file. If you don't want this, you can disable this feature by setting this cvar to <code>false</code>.</p>"},{"location":"Palette/#voxformat_rgbflattenfactor","title":"voxformat_rgbflattenfactor","text":"<p>This will reduce the colors for input files with more than 256 colors. It basically does this:</p> <pre><code>color = color / voxformat_rgbflattenfactor * voxformat_rgbflattenfactor\n</code></pre> <p>on a per color component base.</p> <p>This will reduce very similar looking colors and might help to improve the variance in your palette.</p>"},{"location":"ShaderTool/","title":"ShaderTool","text":"<p>This tool parses GLSL shader files (mainly <code>*.vert</code>, <code>*.frag</code>, <code>*.geom</code> and <code>*.comp</code>) and generates C++ source files for them.</p> <p>You automatically get the shaders added back to the code after saving a shader file and trigger a re-build.</p> <p>The cmake macros expect the shader source below the module in a <code>shaders/</code> directory.</p> <pre><code>set(SHADERS first second)\nengine_generate_shaders(mymodulename ${SHADERS})\n</code></pre> <p>The shaders given in this example would be located at <code>src/modules/mymodulename/shaders/first.*</code>. The tool automatically detects the type of programs that should be connected in the final shader.</p> <p>The code is generated into the build directory in <code>generated/shaders</code>.</p>"},{"location":"ShaderTool/#description","title":"Description","text":"<p>The generator uses <code>ShaderTemplate.h.in</code> and <code>UniformBufferTemplate.h.in</code> as a base to generate the C++ source files.</p> <p>There are several variables in the template file that are replaced by the generator.</p> <ul> <li><code>$includes$</code></li> <li><code>$namespace$</code></li> <li> <p><code>$name$</code></p> </li> <li> <p><code>$setters$</code></p> </li> <li><code>$attributes$</code></li> <li><code>$uniforms$</code></li> <li> <p><code>$uniformarrayinfo$</code></p> </li> <li> <p><code>$shutdown$</code></p> </li> <li><code>$uniformbuffers$</code></li> </ul> <p>The parser includes a preprocessor.</p> <p>You can export constants from the GLSL shader code to the generated C++ code by using <code>$constant</code>.</p> <p>Use <code>$constant varname 42</code> to generate a method that returns 42 with a name <code>getVarname</code></p>"},{"location":"ShaderTool/#branching-feature-toggles","title":"Branching / Feature toggles","text":"<p>Usually you don't have to use branching and uniforms for feature toggles. You can use cvars with the flag <code>CV_SHADER</code> set. If you are going to change one of these cvars, the shaders are recompiled with the value of the cvar given as preprocessor define.</p> <p>This means that you can do stuff like:</p> <pre><code>#if cl_shadowmap == 1\n   [...]\n#else\n   [...]\n#endif\n</code></pre> <p>The <code>#define</code> of <code>cl_shadowmap</code> is done by the shader system at compile time.</p>"},{"location":"Translation/","title":"Translation","text":"<p>The applications are directly reading <code>po</code> files.</p> <p>What are <code>po</code> files? <code>po</code> (portable object) files are used by the gettext translation system and a lot of tools exist to edit them (e.g. poedit)</p> <p>To create a new translation you should use the <code>pot</code> file located in <code>data/shared</code> in the repository.</p> <p>After you've created a new <code>po</code> file, copy them into any of the search paths (either directly, or in a folder named <code>po</code>) and give it the name as specified here.</p> <p>Example: Name it after the pattern <code>ll_CC</code> where <code>ll</code> is an ISO-639 two-letter language code, and <code>CC</code> is an ISO-3166 two-letter country code.</p> <p>If you create a new translation it would be nice if you would contribute it to the project.</p>"},{"location":"Translation/#developers","title":"Developers","text":"<p>Translators don't have to do this</p>"},{"location":"Translation/#updating-the-pot-file","title":"Updating the pot file","text":"<p>After new string were added in the code, you have to update the <code>pot</code> file to make those strings available to the translators.</p> <p>There is a <code>Makefile</code> target called <code>pot</code> - so if you have gnu make installed, just run <code>make pot</code> in the root of the project. Otherwise use the tool <code>xgettext</code> to extract the strings from the source code.</p>"},{"location":"Translation/#mark-strings-as-being-translatable","title":"Mark strings as being translatable","text":"<p>use the <code>_</code> macro to mark a string as being translatable. E.g. <code>_(\"my string\")</code></p> <p>For only extracting them, but not translating them, you can use <code>N_(\"my string\")</code>. Now <code>my string</code> appears in the <code>pot</code> file, but the location where the string is stored, is still the english string <code>my string</code> - not anything translated.</p> <p>By adding a context to the translators you could make things clearer, e.g. use <code>C_(\"Some string that describes the translatable string\", \"my string\")</code> to add a <code>msgctxt</code> line to the pot file. And there is also a <code>NC_</code> version that works like the above mentioned <code>N_</code>.</p>"},{"location":"VisualTests/","title":"Visual Tests","text":"<p>These tests are dedicated test applications. They are no unit tests.</p> <p>Unit tests are in their own module and available via</p> <pre><code>make tests\n</code></pre> <p>Run these test applications with</p> <pre><code>make __directoryname__-run\n</code></pre> <p>or by directly executing the generated binary after compiling them.</p>"},{"location":"VisualTests/#testbloom","title":"testbloom","text":"<p>A test application that applies bloom to an image</p>"},{"location":"VisualTests/#testcamera","title":"testcamera","text":"<p>Test camera options and collisions.</p>"},{"location":"VisualTests/#testglslcomp","title":"testglslcomp","text":"<p>Uses GLSL compute shader to render a circle.</p>"},{"location":"VisualTests/#testglslgeom","title":"testglslgeom","text":"<p>Test geometry shader integration</p>"},{"location":"VisualTests/#testimgui","title":"testimgui","text":"<p>Test the dearimgui integration</p>"},{"location":"VisualTests/#testoctree","title":"testoctree","text":"<p>Renders the octree internals.</p>"},{"location":"VisualTests/#testoctreevisit","title":"testoctreevisit","text":"<p>Visit the frustum in the octree.</p>"},{"location":"VisualTests/#testplane","title":"testplane","text":"<p>Renders a plane object.</p>"},{"location":"VisualTests/#testshapebuilder","title":"testshapebuilder","text":""},{"location":"VisualTests/#testtemplate","title":"testtemplate","text":"<p>Just an empty template for new test applications.</p>"},{"location":"VisualTests/#testtexture","title":"testtexture","text":"<p>Renders a test 2d image.</p>"},{"location":"blog/devlog_25_08/","title":"Devlog 08/2025","text":"<p>I am starting to write a devlog to keep track of the development progress and changes in the vengi project as well as other projects I've been working on. This will help document the evolution of the codebase and provide insights into the development process. I usually don't write devlogs and this is the first time I am doing it, so please bear with me.</p> <p>With 0.1.0 I've bumped the minor version for the first time. The project is now in a more stable state, with many features implemented and a focus on improving the user experience. The next steps will include refining the existing features, fixing bugs, and enhancing performance. This only took a few years ...</p> <p>With the release of version 0.1.0 you have the chance to import all your minecraft skin png files - including extensions.</p> <p> </p> <p>Being not to pedantic, as these changes didn't happen in august, but in the last few months, I want to highlight some of the changes that have been made in that version: Like in 0.2.0 the performance and memory consumption was improved a lot. A lot of formats are now loading the scene by spreading the work over the available cpus. <code>vengi-voxconvert</code> can now print scene images to a text console - which is maybe useful - but definitely cool. The main goal for me was that I can print the voxels in headless mode when running unit tests. So instead of trying to guess which voxel is wrong, I can now see the error. This pixel image is also used to add thumbnails to formats that support it. The <code>vengi-voxconvert</code> tool doesn't have a graphical window or GL context available to use the renderer - that's why this simplified image generator was added.</p> <p>The version 0.2.0 will include a few new features like animation support for cameras. You are now able to fly through the scene and more or less record the camera movement as an <code>AVI</code> or <code>mpeg</code> in the viewport. This will be useful for creating videos or presentations of the scenes.</p> <p>New is also the support for the latest Magicavoxel format changes. The <code>META</code> tag is now supported and you can save in versions other than <code>150</code>. We should also be more resilient against corrupted files - the new <code>ogt_vox</code> version got a way to only log warnings on unexpected data instead of throwing an error.</p> <p>The <code>fbx</code> format was buggy when saving files in the ascii format (the binary format is not even supported yet). Turns out the file needs a particular ascii header to be recognized by the Autodesk FBX tools. This is now fixed and the ascii format can be used again.</p> <p>The Aseprite format also got support for sprite stacking youtube with two new cvars: <code>voxformat_imagesliceoffsetaxis</code> and <code>voxformat_imagesliceoffset</code>.</p> <p>Next to this some more fixes regarding the symlink handling in the file browser on linux have been made. But the more interesting part is most likely the memory consumption improvements while voxelizing meshes. This is of course always an ongoing task, but it's already worth to mention it here. The reduction came mostly by reducing the <code>SharedPtr</code> instance size by 50%. I've tried this multiple times before - but the ASAN always said no to memory alignment. Besides the <code>SharedPtr</code> size reduction that <code>MeshTri</code> class itself was also reduced by a few bytes - this only sounds like a small win, but taking into account that the <code>MeshTri</code> class is used for every triangle in the mesh, this adds up quickly - I learned to love the <code>perf</code> framework in the linux kernel - but especially the gui applications on top of it: <code>hotspot</code> and <code>heaptrack</code>.</p> <p>As I am a one-man-show, I need to make updates as automated as possible. I've worked on that side of the project, too by extending the <code>prepare-release</code> makefile target to also include a check for missing documentation. Since the <code>ogt_vox</code> library was missing in the <code>update-libs</code> target, I've added it there, too.</p> <p>I've created and merged pull requests in jpaver's excellent library <code>ogt_vox</code>. These included <code>META</code> chunk support - scene metadata (as the version of the file), but also the <code>ogt_assert_warn</code> macro to be more resilient against corrupted files (see above).</p> <p>Also worth to mention is the transform of thumbnails between format conversions in <code>vengi-voxconvert</code>. Previously, you got a new simplified screenshot (added in 0.1.0) for formats that support thumbnails. Now you get the original thumbnail from the source file, which is more useful for formats that support it.</p> <p>Last but not least the version updates of the dependencies also happened a few times. I've noticed that the mesh import could benefit from <code>meshoptimizers</code> simplification features. But right now this is not yet done.</p>"},{"location":"blog/devlog_25_08_2/","title":"Memory consumption improvements","text":"<p>The linux perf framework is a great tool to analyze performance and memory consumption of applications. I've reduced the overall memory consumption in the last few days. Let me show you a small change that alone reduced the memory by 3MB when loading minecraft files.</p> <p></p> <p>Notice the overall memory consumption of <code>152,1MB</code>. The fixed size hash map implementation was just initialized with the wrong size and the pool allocator just allocated <code>3MB</code> more than needed. After fixing this, the overall memory consumption is down to <code>149,3MB</code>.</p> <p></p> <p>This is also integrated into the cmake and makefile build system. You can run <code>make tests-voxelformat-heaptrack</code> to generate a heaptrack file that can be analyzed with the <code>heaptrack</code> gui application.</p> <p>A few of the collection classes also got chunk allocators as well as free lists to reduce the memory fragmentation and overhead while allocating and freeing memory.</p>"},{"location":"blog/devlog_25_08_2/#memory-leaks","title":"Memory leaks","text":"<p>Two memory leaks were also fixed in the error handling code of the <code>genland</code> and the <code>importAsPlane</code> lua bindings. While investigating them I've also found that there were no unit tests for <code>importAsPlane</code>. This is now fixed, too and the scripting docs also got updated.</p>"},{"location":"blog/devlog_25_08_2/#google-benchmark-hotspot","title":"Google benchmark - hotspot","text":"<p>There are always two tools that I use to analyze performance, the google benchmark library and <code>hotspot</code> - a tool that also uses the linux perf framework, but provides a nice gui on top of it. The google benchmark library is great to measure small code snippets and compare different implementations. <code>hotspot</code> is more useful to analyze the overall application performance and find bottlenecks.</p> <p>One of those bottlenecks was the <code>PaletteLookup</code> class that is used to find the closest matching color in a palette. This is used in multiple places, for example when voxelizing meshes or converting images to voxel data. The original implementation used a hash map to speed up repeating lookups. But this map couldn't get used in multiple threads. The current implementation uses a fixed size array - and is using quantization to perform O(1) lookups. This is a huge speedup, especially when voxelizing meshes with many different colors and using multiple threads.</p> <p> </p> <p>Before this change was made, the <code>PaletteLookup</code> dominated the cpu usage in my measurements. After the change, the <code>PaletteLookup</code> is not even visible anymore in the hotspot flame graph without zooming in (second screenshot).</p>"},{"location":"blog/devlog_25_09/","title":"Not much vengi this week","text":"<p>I was quite busy and didn't had much time to work on vengi - but a few things are worth to mention them:</p> <ul> <li>The object identification and splitting was improved. Previously it wasn't working with hollowed models, as I was just check the 6 face directions - this is now checkout all 26 directions to be able to split hollowed objects properly, too.</li> <li>The <code>resetcamera</code> command wasn't working in edit mode if you have the viewport option Apply Transforms checked. This is fixed now.</li> <li>I've tried to improve the <code>kfa</code> animation support for <code>kv6</code> files. But didn't get that far yet. The slab6 code is really hard to read and follow.</li> </ul>"},{"location":"blog/devlog_25_09/#other-stuff","title":"Other stuff","text":"<p>I've also worked a little bit on World of Padman and prepared a gist with a script that I am using since some time to cherry-pick commits from ioq3 to wop. This script has the purpose to make cherry-picking possible without conflicts even though one repository has a different formatting-style applied than the other one (World of Padman had a clang-format run, ioq3 does not). Usual cherry-picking can't handle this. The script can be called with <code>git cherry-pick-format &lt;commit-id&gt;</code> - what it does is roughly the following:</p> <ul> <li>check out the parent branch of <code>&lt;commit-id&gt;</code></li> <li>create a temp branch</li> <li>copy <code>.clang-format</code> files from the original working copy into the temp branch working copy</li> <li>reformat the files included in <code>&lt;commit-id&gt;</code> with clang-format</li> <li>commit the changes</li> <li>check out <code>&lt;commit-id&gt;</code></li> <li>format the patch</li> <li>go to temp branch</li> <li>copy the changed files from <code>&lt;commit-id&gt;</code> over to the temp branch workspace</li> <li>create a commit while preserving the original commit meta data (author, date, commit message)</li> <li>switch back to the original branch pointer and cherry-pick the newly created and formatted commit</li> </ul>"},{"location":"blog/devlog_25_09_2/","title":"Multiuser mode","text":"<p>I've started to implement a client/server mode for <code>vengi-voxedit</code> so people can collaborate while working on scenes. This feature was requested by a Ace of Spades community member. Initial state transfer might take some time - but after that the traffic is much lower.</p> <p> </p> <p>One the road to support this I also had to tackle a long standing issue. The maximum region size of a volume for memento (undo/redo) state tracking. Why was that important for the network mode? Because I've decided to attach the network mode to the memento state handling - as every modification in the scene finds its route into the memento state handling. So I've wrapped up a listener interface and was surprised how good that worked out. After just a few days I had a working client/server mode. But there was a problem... the undo/redo also recorded a full volume state. Due to this memory wasting - but at the time of writing the memento state handling the easiest - way, it wasn't feasable to transmit the full Ace of Spades map just because you placed a single voxel. It took a few attempts to improve this, but I am quite happy with the outcome and even the non-network users will benefit from the less memory hungry memento states.</p> <p>youtube video</p>"},{"location":"blog/devlog_25_09_2/#let-there-be-shadow","title":"Let there be shadow","text":"<p>It's always a hop on hop off tour to get the feature requests right. There were users that wanted to see the real palette colors in a scene - no shading - nothing. I can totally understand that and it makes a lot of sense in a quite a lot of scenarios. But on the other hand there were also users that requested to get the shading back. In order to make this easier, <code>vengi-voxedit</code> got a new panel on the upper right side: The scene settings. You can use this panel to control the sun values like the azimuth and the elevation, or just pick between a few presets to put your scene into the right light (resp. shadow).</p> <p>While implementing this and playing around with the shadows I've noticed a few issues with the shadows like artifacts and Peter panning. I've improved the bias calculation and made it dynamic as well as a few other things that drastically improved the shadows.</p> <p>After doing this the shader got bigger and bigger - and .... there is a max string length in MSVC that this shader exceeded. It went unnoticed until I've - by coincidence - booted Windows for anther fix. <code>vengi-voxedit</code> wasn't even starting anymore and the shader error log looked quite weird. I was remembered that MSVC had a max string length of around 16000 characters - and because I've hit that limit already once in the past I did a smart splitting of those shader strings into smaller parts to please MSVC again. Turns out... I wasn't that smart. I've removed a newline too much - and everything exploded because <code>if (foo) // comment #if SOMEDEFINE /* comment */ #else someCode()</code> just doesn't make much sense in the same line. Anyway - glslangValidator didn't caught this because the final-shader-to-file wasn't hit by that bug, just the final-shader-to-string code path was. I've now ensured that every other platform is using the splitting code, too - even though this is afaik only needed on MSVC (better safe than sorry).</p> <p> </p>"},{"location":"blog/devlog_25_09_2/#formats-formats-formats","title":"Formats, formats, formats","text":"<p>There were a few memory leaks that are fixed now - and FBX got texture coordinate support on loading and other bug fixes. The vengi internal format got a version bump because I needed the UUIDs of the nodes inside the format (I use the <code>VengiFormat</code> to serialize the scene graph state for the network protocol initial message).</p>"},{"location":"blog/devlog_25_09_2/#thumbnailer-windows","title":"Thumbnailer Windows","text":"<p>I was also working on the thumbnailer implementation for the Windows explorer - and finally found out why the DLL entrypoints are not called (see the ticket for further details) - but the DLL support needs a rewrite regarding window creation - as this is apparently not supported from DLLs for security reasons.</p>"},{"location":"blog/devlog_25_10/","title":"New formats and fixes","text":"<p>The next version of vengi will again support a few new formats - the Goxel <code>txt</code> format and the Veloren server chunk <code>*.dat</code> files.</p> <p><code>vengi-voxconvert --input veloren_server/directory/of/chunk_X_X_files --output veloren_chunks.vengi -f</code></p> <p>This will convert all the <code>*.dat</code> files in the chunk directory into a <code>vengi</code> file (or any other supported format).</p> <p>The Goxel <code>txt</code> format is a text-based format that can be used to store voxel data. It's not very efficient, but it's human-readable and supported by the Goxel editor. I added support after reading a post on Discord from someone who used AI to generate voxel art via Python. They prompted the AI to produce Python code which generated voxel data, and the output of those scripts was saved as <code>txt</code> files. The resulting voxel models weren't particularly impressive, but the idea of a simple, text-based interchange format (we already support other text-like formats such as <code>qef</code> from Qubicle or <code>csv</code>) makes a lot of sense. So here we are with another easy-to-parse and easy-to-produce text-based format.</p>"},{"location":"blog/devlog_25_10/#shadows","title":"Shadows","text":"<p>Every now and then I come back to rendering-related work and I always relearn how much I still have to learn about rendering. The improvements I mentioned in the last blog post still suffer from peter\u2011panning and other artifacts. I've spent quite some time trying to fix those, but unfortunately without success. I need to read a few more articles about shadow mapping, shadow acne, and peter\u2011panning before I give this another try.</p>"},{"location":"blog/devlog_25_10/#multiuser-mode","title":"Multiuser mode","text":"<p>Some indirect work went into reducing network traffic for multiuser mode. I've reduced the number of bytes transmitted over the wire and, as a side effect, reduced the memory consumption of the memento states (they're tightly tied to each other).</p>"},{"location":"blog/devlog_25_10/#optimizations","title":"Optimizations","text":"<p>The Sierpinski triangle algorithm used to split large triangles into smaller ones for voxelization was quite slow - not because of the algorithm itself, but due to how I used it. The splits changed the size of the collection that stores the triangles, causing many reallocations and making an otherwise fast algorithm slow.</p>"},{"location":"blog/devlog_25_10/#voxconvert-and-the-web","title":"voxconvert and the web","text":"<p><code>vengi-voxconvert</code> is now also supported to be executed from the web via Emscripten. Previously, no console tools could be executed using the shell code I had, so this is a step forward. It still needs improvements for passing parameters to the tools, but the basic setup is in place.</p>"},{"location":"palconvert/Examples/","title":"Examples","text":""},{"location":"palconvert/Examples/#convert-palette","title":"Convert palette","text":"<p>Convert Adobe Swatch Exchange palette file to png</p> <p><code>./vengi-palconvert --input infile.ase --output outfile.png</code></p>"},{"location":"palconvert/Index/","title":"About","text":"<p>Command line tool to convert palettes.</p>"},{"location":"palconvert/Index/#further-reading","title":"Further reading","text":"<ul> <li>Usage</li> <li>Examples</li> <li>Supported formats</li> <li>Palettes</li> </ul>"},{"location":"palconvert/Usage/","title":"Usage","text":"<p>Print a detailed description of the program parameters for your particular version.</p> <pre><code>vengi-palconvert --help\n</code></pre> <p>You can use the bash completion or zsh completion</p> <p>Put this in your <code>.bashrc</code> or <code>.zshrc</code></p> <p><code>source &lt;(vengi-palconvert --completion bash)</code> (or replace <code>bash</code> by <code>zsh</code>)</p> <ul> <li><code>--input &lt;file&gt;</code>: allows to specify input files. You can specify more than one file</li> <li><code>--output &lt;file&gt;</code>: allows you to specify the output filename</li> </ul>"},{"location":"palconvert/Usage/#bash-completion","title":"bash completion","text":"<p>You can also use the bash completion script by adding this to your <code>.bashrc</code></p> <pre><code>source &lt;(vengi-palconvert --completion bash)\n</code></pre>"},{"location":"thumbnailer/Examples/","title":"Example","text":""},{"location":"thumbnailer/Examples/#manual-thumbnails-creation","title":"Manual thumbnails creation","text":""},{"location":"thumbnailer/Examples/#unix","title":"Unix","text":"<pre><code>for i in $(find $HOME/dev/vengi -name \"*.vox\" -or -name \"*.cub\" -or -name \"*.qbt\" -or -name \"*.qb\" -or -name \"*.vxl\" -or -name \"*.vxm\"); do\n fullpath=$(readlink -f $i)\n md5=$(echo -n \"file://$fullpath\" | md5sum -z | awk ' { print $1.\".png\" }')\n vengi-thumbnailer -s 128 --input $i --output $HOME/.cache/thumbnails/large/$md5\ndone\n</code></pre>"},{"location":"thumbnailer/Examples/#windows","title":"Windows","text":"<pre><code>$array = \"1-2,5\", \"1-2,7\"\nforeach ($i in $array){\n  ./vengi-thumbnailer.exe -s 128 --input $i --output $i.png\n}\n</code></pre>"},{"location":"thumbnailer/Examples/#turntables","title":"Turntables","text":"<p>The thumbnailer is able to generate scene turntables with 16 images.</p> <pre><code>./vengi-thumbnailer -s 128 --turntable 16 --input somevoxel.vox --output somevoxel.png\n</code></pre>"},{"location":"thumbnailer/Examples/#render-top-view","title":"Render top view","text":"<pre><code>./vengi-thumbnailer -s 128 --camera-mode top --input somevoxel.vox --output somevoxel.png\n</code></pre>"},{"location":"thumbnailer/Examples/#render-isometric-image","title":"Render isometric image","text":"<pre><code>./vengi-thumbnailer -s 128 --input somevoxel.vox --output somevoxel.png --image --isometric\n</code></pre>"},{"location":"thumbnailer/Index/","title":"About","text":"<p>This application needs an opengl context. It is a command line tool running headless (meaning you don't see a window popping up).</p>"},{"location":"thumbnailer/Index/#linux-filemanagers","title":"Linux Filemanagers","text":"<p>Create thumbnailer images of all supported voxel formats. In combination with a mimetype definition and a <code>.thumbnailer</code> definition file that must be installed in <code>/usr/share/mime/packages</code> and <code>/usr/share/thumbnailer</code> this will e.g. create small preview images for the supported voxel formats.</p> <p>It works for any file manager that supports <code>.thumbnailer</code> entries, including Nautilus, Thunar (when tumbler is installed), Nemo, Caja, and PCManFM.</p>"},{"location":"thumbnailer/Index/#windows-explorer","title":"Windows Explorer","text":"<p>There is a <code>voxelthumb.dll</code> that must get registered via <code>regsvr32 /s voxelthumb.dll</code>.</p> <p>You can still run this application from the windows command line to generate thumbnail images of your voxel models. See the examples for more details.</p>"},{"location":"voxconvert/Configuration/","title":"Configuration","text":"<p>The formats also have a list of mesh related cvars.</p> <p>See <code>./vengi-voxconvert --help</code> or configuration for more details.</p>"},{"location":"voxconvert/Examples/","title":"Examples","text":"<p>Make sure to check out the configuration section to see cvars that can influence the result.</p>"},{"location":"voxconvert/Examples/#animate-a-character","title":"Animate a character","text":"<p><code>animate</code> is a lua script.</p> <p>Animate a given scene if the nodes are named correctly.</p> <p>Valid names are <code>belt</code>, <code>head</code>, <code>foot</code>, <code>shoulder</code> or <code>hand</code> with either left or right indicators.</p> <p>e.g. <code>belt</code>, <code>belt_left</code>, <code>belt_right</code>, <code>left_belt</code>, <code>right_belt</code>, <code>belt_l</code>, <code>belt_r</code>, <code>l_belt</code>, <code>r_belt</code></p> <p>Model should use a right-handed system - this basically means it should look into the negative z direction (and right shoulder should be along the positive x axis, y is up).</p> <p>The model should have the correct parent and child relationships (a hand or arm is a child of a shoulder, a foot is child of a leg, etc).</p> <p><code>./vengi-voxconvert --script \"animate all\" --input character.vengi --output character_animated.vengi</code></p> <p>You can extend that script to transfer your own animations to all your characters.</p>"},{"location":"voxconvert/Examples/#generate-a-map-with-lua","title":"Generate a map with lua","text":"<p>There are several map generators available.</p> <p><code>./vengi-voxconvert --script aos_forest_river --output aos_forest_river.vengi</code></p> <p>They are generating for the Ace of Spades map size (based on the public domain code from aoemap - so we can also directly create the <code>vxl</code> for Ace of Spades.</p> <p><code>./vengi-voxconvert --script aos_forest_river --output aos_forest_river.vxl</code></p>"},{"location":"voxconvert/Examples/#level-of-detail-lod","title":"Level of detail (LOD)","text":"<p>Generate a lod scaled by 50% from the input model.</p> <p><code>./vengi-voxconvert --scale --input infile.vox --output output.vox</code></p>"},{"location":"voxconvert/Examples/#convert-to-multiple-different-formats","title":"Convert to multiple different formats","text":"<p>Convert the model into multiple different formats in the same run</p> <p><code>./vengi-voxconvert --input infile.vox --output output.gox --output output.cub</code></p>"},{"location":"voxconvert/Examples/#import-2d-image-as-volume","title":"Import 2d image as volume","text":"<p>Imports a 2d image and applies depth to it.</p> <p><code>./vengi-voxconvert -set voxformat_imageimporttype 2 -set voxformat_imagevolumemaxdepth 8 -set voxformat_imagevolumebothsides true --input infile.png --output output.vox</code></p> <p>Import given input image as volume. Uses a depth map to make a volume out of the image. The depth map R channel is using values from 0 (black) to white (255) resulting in voxel heights from 1 to max-height (see <code>voxformat_imagevolumemaxdepth</code>).</p> <p>The <code>--input</code> with e.g. <code>infile.png</code> will pick the depth map next to the image path called <code>infile-dm.png</code> as depth map.</p> <p>There is also a lua script available called <code>imageasvolume</code> that can do the same.</p> <p>There are other image import types available:</p> <ul> <li><code>voxformat_imageimporttype 0</code> - import planes/slices in the z direction - or just as plane if not more than one slice was found</li> <li><code>voxformat_imageimporttype 1</code> - import as heightmap (top view) with color in rgb and height in red channel - also see <code>voxformat_imageheightmapminheight</code> - if the color components are not 4 or the image is grayscale, we just import with a fixed color.</li> <li><code>voxformat_imageimporttype 2</code> - import as volume with depth map (default) - also see <code>voxformat_imagevolumemaxdepth</code> and <code>voxformat_imagevolumebothsides</code></li> </ul>"},{"location":"voxconvert/Examples/#slice-a-volume-into-png-images","title":"Slice a volume into png images","text":"<p><code>./vengi-voxconvert --input yourfile.vox --merge --output output.png -set voxformat_imagesavetype 0</code></p> <p>This imports <code>yourfile.vox</code> - merges all the nodes into one and then export the png slices.</p> <p>There are other png save options available</p> <ul> <li><code>voxformat_imagesavetype 0</code> - planes/slices in the z direction</li> <li><code>voxformat_imagesavetype 1</code> - export as heightmap (top view) with color in rgb and height in alpha channel</li> <li><code>voxformat_imagesavetype 3</code> - thumbnail view (this is producing different results between <code>vengi-voxconvert</code> and <code>vengi-voxedit</code>)</li> </ul>"},{"location":"voxconvert/Examples/#generate-from-heightmap","title":"Generate from heightmap","text":"<p>Just specify the heightmap as input file like this:</p> <p><code>./vengi-voxconvert --input heightmap.png --output outfile.vox -set voxformat_imageimporttype 1</code></p> <p>It's assumed that the given image is a gray scale image - but only the red channel is used anyway.</p> <p>If you want to colorize the surface of your heightmap import, you can just provide a heightmap that is no grayscale and the height is taken from the alpha channel of the image - the rgb channels of the image to determine the surface color.</p>"},{"location":"voxconvert/Examples/#convert-all-obj-files-in-a-zip","title":"Convert all obj files in a zip","text":"<p><code>./vengi-voxconvert --input input.zip --wildcard \"*.obj\" --output output.vengi</code></p>"},{"location":"voxconvert/Examples/#replace-the-colors-with-a-different-palette","title":"Replace the colors with a different palette","text":"<p><code>replacepalette</code> is a lua script that is able to replace or remap the colors of an existing palette to a new palette. You can specify the built-in palettes or filenames to supported palette formats.</p> <p><code>./vengi-voxconvert --input input.vox --script \"replacepalette built-in:minecraft true\" --output mincraft.vox</code></p>"},{"location":"voxconvert/Examples/#export-flat-normal-gltf","title":"Export flat normal gltf","text":"<p>If you want to export flat normals for your <code>gltf/glb</code> file, you can use disable to re-use existing vertices and duplicate the vertices. This gives you flat normals for each vertex.</p> <p><code>./vengi-voxconvert -set voxformat_reusevertices false --input input.vengi --output output.gltf</code></p> <p>By setting <code>voxformat_reusevertices</code> to <code>true</code> you get surface normals for your mesh.</p> <p>NOTE: This only works for cubic voxels - if you use another meshing algorithm (see voxel_meshmode cvar), this setting most likely doesn't have the same effect.</p>"},{"location":"voxconvert/Examples/#export-all-nodes-as-single-files","title":"Export all nodes as single files","text":"<p>Save all nodes in the <code>input.vengi</code> file as dedicated files named after the names of the nodes.</p> <p><code>./vengi-voxconvert --export-models --input input.vengi</code></p> <p>Same as above, but change the target format to <code>kv6</code> in this example</p> <p><code>./vengi-voxconvert --export-models --input input.vengi --output output.kv6</code></p> <p>Please keep in mind that the target format must be able to save the particular nodes of the source format. There might be restrictions on dimensions. They are not automatically split. See the other available options regarding splitting of nodes.</p>"},{"location":"voxconvert/Examples/#merge-several-models","title":"Merge several models","text":"<p>Merge several models into one:</p> <p><code>./vengi-voxconvert --input one.vox --input two.vox --output onetwo.vox</code></p>"},{"location":"voxconvert/Examples/#split-objects-into-single-volumes","title":"Split objects into single volumes","text":"<p>Split voxels with the palette index <code>66</code> into own nodes.</p> <p><code>./vengi-voxconvert --script splitcolor --scriptcolor 66 --input infile.vox --output outfile.vox</code></p> <p>Splitting single objects that are not connected to other objects can also be split into own nodes.</p> <p><code>./vengi-voxconvert --script splitobject --input infile.vox --output outfile.vox</code></p> <p>Slice the model into smaller pieces (<code>width:height:depth</code>).</p> <p><code>./vengi-voxconvert --split 10:10:10 --input infile.vox --output outfile.vox</code></p>"},{"location":"voxconvert/Examples/#handle-a-ply-point-cloud-import","title":"Handle a ply point cloud import","text":"<p>A <code>ply</code> file without face definitions is handled as point cloud. You can use the <code>voxformat_pointcloudsize</code> cvar (see configuration) to specify the size of the voxels and to connect them.</p> <p><code>./vengi-voxconvert --input infile_pointcloud.ply --output outfile.vox</code></p> <p>Of course it's also possible to convert the point cloud directly into a mesh</p> <p><code>./vengi-voxconvert --input infile_pointcloud.ply --output outfile.obj</code></p> <p>And you can also combine this with marching cubes meshing.</p>"},{"location":"voxconvert/Examples/#voxelize-a-obj-gltf-ply-fbx-stl-or-any-supported-mesh-file","title":"Voxelize a obj, gltf, ply, fbx, stl or any supported mesh file","text":"<p>Voxelize an obj and save as magicavoxel (including colors):</p> <p>You are getting better results if you create a palette from your textures first.</p> <p>This can be done by reducing the color to 256 and import that reduced image in voxedit as palette.</p> <p>For obj the mtl file must be in the same dir as the obj files, as well as the potential textures.</p> <p>glTF is supported both in ascii and binary - but the satellite files must also reside in the same dir as the <code>glb</code> or <code>gltf</code> file.</p> <p><code>./vengi-voxconvert -set voxformat_scale 2 -set palette /path/to/palette.png -set voxformat_createpalette false --input mesh.obj --output voxels.vox</code></p> <p>See the supported formats for a few more details.</p> <p>If you also need normals you can specify the used palette with the cvar <code>normalpalette</code> - similar to the <code>palette</code> cvar given in the example above.</p>"},{"location":"voxconvert/Examples/#rotate-the-voxels","title":"Rotate the voxels","text":"<p>You can rotate the voxels around the x axis by 180 degree like this:</p> <p><code>./vengi-voxconvert --rotate x:180 --input infile.vox --output outfile.vox</code></p> <p>This of course also works for <code>y</code> and <code>z</code>, too.</p>"},{"location":"voxconvert/Examples/#translate-the-voxels","title":"Translate the voxels","text":"<p>You can translate the voxels in the world like this:</p> <p><code>./vengi-voxconvert --translate 0:10:0 --input heightmap.png --output outfile.vox</code></p> <p>This would move the voxels 10 units upwards. But keep in mind that not every format supports to store a translation offset.</p>"},{"location":"voxconvert/Examples/#execute-lua-script","title":"Execute lua script","text":"<p>Use the <code>--script</code> parameter:</p> <p><code>./vengi-voxconvert --script \"cover 2\" --input infile.vox --output outfile.vox</code></p> <p>This is executing the script in <code>./scripts/cover.lua</code> with a parameter of <code>2</code>.</p> <p><code>./vengi-voxconvert --script \"./scripts/cover.lua 2\" --input infile.vox --output outfile.vox</code></p> <p>This is doing exactly the same as above - just with a full path.</p> <p>It's also possible to execute a lua script that is generating the voxels. Without any input file.</p> <p><code>./vengi-voxconvert --script aos_rainbow_towers --output outfile.vox</code></p> <p>See the scripting documentation for further details.</p>"},{"location":"voxconvert/Examples/#extract-palette-png","title":"Extract palette png","text":"<p>Saves the png in the same dir as the vox file:</p> <p><code>./vengi-voxconvert --export-palette --input infile.vox --output outfile.vox</code></p> <p>There will be an <code>infile.png</code> now.</p>"},{"location":"voxconvert/Examples/#convert-to-a-different-palette","title":"Convert to a different palette","text":"<p>Convert the input file colors to a new palette by selecting the closest match:</p> <p><code>./vengi-voxconvert -set palette built-in:nippon -set voxformat_createpalette false --input infile.vox --output outfile.vox</code></p>"},{"location":"voxconvert/Examples/#extract-single-models","title":"Extract single models","text":"<p>Extract just a few models from the input file.</p> <p><code>./vengi-voxconvert --filter 1-2,4 --input infile.vox --output outfile.vox</code></p> <p>This will export models 1, 2 and 4.</p> <p>Another option is to filter by node properties:</p> <p><code>./vengi-voxconvert --filter-property propertyName:propertyValue --input infile.vox --output outfile.vox</code></p> <p>Or by just checking whether a property is set - no matter which value:</p> <p><code>./vengi-voxconvert --filter-property propertyName --input infile.vox --output outfile.vox</code></p> <p>So every model node that has the node property <code>propertyName</code> set will get exported into <code>outfile.vox</code>.</p> <p>You can find all node properties by using <code>--json</code>:</p> <p><code>./vengi-voxconvert --json --input infile.vox</code></p> <p>If you want the vertex details per node and for the whole scene, you should use <code>--json full</code>.</p>"},{"location":"voxconvert/Examples/#convert-to-mesh","title":"Convert to mesh","text":"<p>You can export your volume model into a gltf, obj, stl or ply (see Formats for more options)</p> <p><code>./vengi-voxconvert --input infile.vox --output outfile.obj</code></p> <p><code>./vengi-voxconvert --input infile.vox --output outfile.gltf -set voxformat_transform_mesh true</code></p>"},{"location":"voxconvert/Examples/#convert-to-different-formats","title":"Convert to different formats","text":""},{"location":"voxconvert/Examples/#convert-qubicle-to-cubzh","title":"Convert qubicle to cubzh","text":"<p><code>./vengi-voxconvert --input infile.qb --output output.3zh</code></p>"},{"location":"voxconvert/Examples/#convert-minecraft-to-magicavoxel","title":"Convert minecraft to magicavoxel","text":"<p><code>./vengi-voxconvert --input infile.mca --output output.vox</code></p>"},{"location":"voxconvert/Examples/#convert-sandbox-voxedit-to-qubicle","title":"Convert sandbox voxedit to qubicle","text":"<p><code>./vengi-voxconvert --input infile.vxm --output output.qb</code></p>"},{"location":"voxconvert/Examples/#batch-convert","title":"Batch convert","text":"<p>To convert a complete directory of e.g. <code>*.vox</code> to <code>*.obj</code> files, you can use e.g. the bash like this:</p>"},{"location":"voxconvert/Examples/#bash-linux-osx","title":"Bash (Linux, OSX)","text":"<p>Beware - no whitespaces in files</p> <pre><code>for i in *.vox; do vengi-voxconvert --input \"$i\" --output \"${i%.vox}.obj\"; done\n</code></pre> <pre><code>for i in *.vxm; do vengi-voxconvert --input \"$i\" --output \"${i%.vxm}.gltf\" done\n</code></pre>"},{"location":"voxconvert/Examples/#powershell-windows","title":"PowerShell (Windows)","text":"<p>https://docs.microsoft.com/en-us/powershell/scripting/learn/ps101/06-flow-control?view=powershell-7.2</p> <p>An example for the windows powershell to extract single models into a new model</p> <pre><code>$array = \"1-2,5\", \"1-2,7\"\nforeach ($i in $array){\n  &amp; .\\vengi-voxconvert --filter $i --input \"input.vox\" --output \"output_$i.vxm\"\n}\n</code></pre> <p>https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem</p> <p>Convert all magicavoxel vox files in the current directory into gltf files</p> <pre><code>foreach ($file in Get-ChildItem -Filter \"*.vox\") {\n   &amp; .\\vengi-voxconvert.exe --input \"$($file.FullName)\" --output \"$($file.BaseName).gltf\"\n}\n</code></pre>"},{"location":"voxconvert/Examples/#batch-file-windows","title":"Batch file (Windows)","text":"<p>https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/for</p> <p>Windows batch (or <code>cmd.exe</code>) example to convert all png in the current directory into magicavoxel vox files.</p> <pre><code>for %f in (*.png) do call vengi-voxconvert --input \"%~f\" --output \"%~nf.vox\"\n</code></pre> <p>Process all pngs in the <code>Input</code> folder with a depth map to create voxel models in the <code>Output</code> folder.</p> <pre><code>@echo off\nsetlocal enabledelayedexpansion\n\nset INPUT_FOLDER=\\Input\nset OUTPUT_FOLDER=\\Output\n\nfor %%f in (%INPUT_FOLDER%*.png) do (\n    set \"input_file=%%f\"\n    set \"file_name=%%~nf\"\n\n    echo Processing !input_file!\n    if not \"!file_name!\"==\"!file_name:-dm=!\" (\n        echo Skipping !input_file! due to -dm in the name.\n    ) else (\n        set \"output_file=%OUTPUT_FOLDER%!file_name!.vox\"\n        vengi-voxconvert -set voxformat_imageimporttype 2 -set voxformat_imagevolumemaxdepth 2 -set voxformat_imagevolumebothsides false --input \"!input_file!\" --output \"!output_file!\"\n    )\n)\n</code></pre>"},{"location":"voxconvert/Index/","title":"About","text":"<p>Command line tool (and UI variant) to convert voxel volume, image or polygon formats between each other.</p> <p>Modifying the voxels is also supported - rotating, translating, create lod, extract palette, execute lua scripts and a lot more.</p> <p>If you need a way to automate your voxel assets for your art pipeline, <code>vengi-voxconvert</code> might be a tool you find useful.</p> <p>If you e.g. need to apply a snow layer on top of your voxels, put grass everywhere or just thicken your voxels - check our the lua script integration and the default scripts that are shipped with the tool.</p> <p>If you have images that you would like to convert to voxels including depth, you can import the image as a plane and apply the depth values for each voxel.</p> <p>Just check out the examples and the usage links below.</p> <p>If you dislike the tool, found a bug or need a feature, please let us know.</p>"},{"location":"voxconvert/Index/#windows","title":"Windows","text":"<p>How to run the <code>vengi-voxconvert</code> command line tool on Windows:</p> <p>Open a terminal and navigate to the folder where you extracted the files. You can use <code>cmd.exe</code> or <code>PowerShell</code>.</p> <p>To run the tool, use the command <code>vengi-voxconvert.exe</code> followed by the parameters you want to use.</p>"},{"location":"voxconvert/Index/#osx","title":"OSX","text":"<p>Open the dmg and go e.g. to <code>vengi-voxconvert.app</code> - use Show Package Contents to see the binaries in the app. Go to <code>Contents/MacOS</code> and copy the contained files into a new folder.</p> <p>Use Shift+Open for running the cli - otherwise it will exit immediately.</p>"},{"location":"voxconvert/Index/#further-reading","title":"Further reading","text":"<ul> <li>Usage</li> <li>Configuration</li> <li>Examples</li> <li>Screenshots</li> <li>Supported formats</li> <li>Scripting support</li> <li>Palettes</li> </ul>"},{"location":"voxconvert/Screenshots/","title":"Screenshots","text":""},{"location":"voxconvert/Usage/","title":"Usage","text":"<p>Print a detailed description of the program parameters for your particular version.</p> <pre><code>vengi-voxconvert --help\n</code></pre> <p>You can use the bash completion or zsh completion</p> <p>Put this in your <code>.bashrc</code> or <code>.zshrc</code></p> <p><code>source &lt;(vengi-voxconvert --completion bash)</code> (or replace <code>bash</code> by <code>zsh</code>)</p> <ul> <li><code>--crop</code>: reduces the volume sizes to their voxel boundaries.</li> <li><code>--export-models</code>: export all the models of a scene into single files. It is suggested to name the models properly to get reasonable file names.</li> <li><code>--export-palette</code>: will save the palette file for the given input file.</li> <li><code>--filter &lt;filter&gt;</code>: will filter out models not mentioned in the expression. E.g. <code>1-2,4</code> will handle model 1, 2 and 4. It is the same as <code>1,2,4</code>. The first model is <code>0</code>. See the models note below.</li> <li><code>--force</code>: overwrite existing files</li> <li><code>--image</code>: print the scene voxels to the text console. Useful if you don't have a graphical user interface available but still need to visually compare voxel models.</li> <li><code>--input &lt;file&gt;</code>: allows to specify input files. You can specify more than one file</li> <li><code>--merge</code>: will merge a multi model volume (like <code>vox</code>, <code>qb</code> or <code>qbt</code>) into a single volume of the target file</li> <li><code>--mirror &lt;x|y|z&gt;</code>: allows you to mirror the volumes at x, y and z axis</li> <li><code>--output &lt;file&gt;</code>: allows you to specify the output filename</li> <li><code>--resize &lt;x:y:z&gt;</code>: resize the volume by the given x (right), y (up) and z (back) values</li> <li><code>--rotate &lt;x|y|z&gt;</code>: allows you to rotate the volumes by 90 degree at x, y and z axis. Specify e.g. <code>x:180</code> to rotate around x by 180 degree.</li> <li><code>--scale</code>: perform lod conversion of the input volume (50% scale per call)</li> <li><code>--script \"&lt;script&gt; &lt;args&gt;\"</code>: execute the given script - see scripting support for more details</li> <li><code>--split &lt;x:y:z&gt;</code>: slices the volumes into pieces of the given size</li> <li><code>--surface-only</code>: Remove any non surface voxel. If you are meshing with this, you get also faces on the inner side of your mesh.</li> <li><code>--translate &lt;x:y:z&gt;</code>: translates the volumes by x (right), y (up), z (back)</li> <li><code>--wildcard &lt;wildcard&gt;</code>: e.g. <code>*.vox</code>. Allow to specify a wildcard in situations where the <code>--input</code> value is a directory</li> </ul> <p>Just type <code>vengi-voxconvert</code> to get a full list of commands and options.</p> <p>Using a different target palette is also possible by setting the <code>palette</code> cvar.</p> <p><code>./vengi-voxconvert -set palette /path/to/palette.png -set voxformat_createpalette false --input infile --output outfile</code></p> <p>The palette file has to be in the dimensions 1x256. It is also possible to just provide the basename of the palette. This is e.g. <code>nippon</code>. The tool will then try to look up the file <code>palette-nippon.png</code> in the file search paths.</p> <p>You can convert to a different palette with this command. The closest possible color will be chosen for each color from the source file palette to the specified palette.</p> <p>If something isn't working as you expected it to work, it might be an option to activate the debug logging. But the output can be a bit overwhelming. See the configuration logging section about more details.</p>"},{"location":"voxconvert/Usage/#bash-completion","title":"bash completion","text":"<p>You can also use the bash completion script by adding this to your <code>.bashrc</code></p> <pre><code>source &lt;(vengi-voxconvert --completion bash)\n</code></pre>"},{"location":"voxconvert/Usage/#the-order-of-execution-is","title":"The order of execution is:","text":"<ul> <li>filter</li> <li>export models</li> <li>merge</li> <li>scale</li> <li>mirror</li> <li>rotate</li> <li>translate</li> <li>script</li> <li>pivot</li> <li>crop</li> <li>split</li> </ul>"},{"location":"voxconvert/Usage/#models","title":"Models","text":"<p>Some formats also have multiple model support. Our models are maybe not the models you know from your favorite editor. Each model can currently only have one object or volume in it. To get the proper model ids (starting from 0) for your voxel file, you should load it once in voxedit and check the model panel or use <code>--json</code> to get a list.</p> <p>Especially magicavoxel supports more objects in one model. This might be confusing to get the right numbers for <code>voxconvert</code>. See this issue for a few more details.</p>"},{"location":"voxedit/Animation/","title":"Animation","text":"<p>IMPORTANT: Animations are only saved in the <code>vengi</code> format or when exported to <code>gltf</code>. You should always save to <code>vengi</code> and then export from here to any other format that supports animations, too. See formats.</p>"},{"location":"voxedit/Animation/#videos","title":"Videos","text":"<ul> <li>youtu.be/5aC3-QumPcw (animation scripting via lua - see scripts)</li> <li>youtu.be/NL5aEO_an1w (loading the <code>hmec</code> animation from command &amp; conquer)</li> <li>youtu.be/vXTOkH3HwIo (showing the animation of a windmill)</li> <li>youtu.be/mynzgoaoxXo (export as gltf with animations and re-import into vengi)</li> </ul>"},{"location":"voxedit/Animation/#details","title":"Details","text":"<p>There is a timeline for creating keyframes and you can transform the objects with the gizmo if the editor is in scene mode.</p> <p>Check out the options in the animation timeline to e.g. create keyframes automatically whenever you change something in the transform data.</p>"},{"location":"voxedit/Animation/#scripting","title":"Scripting","text":"<p>You can also create animations from scripts. There is an example available with <code>animate.lua</code> where you can create a few character animations based on node names.</p>"},{"location":"voxedit/Configuration/","title":"Configuration","text":"<p>You can change the configuration options in either the options menu</p> <p></p> <p>or in a more general way in the cvar dialog that you can find the menu bar under Help.</p> <p></p> <p>See <code>./vengi-voxedit --help</code> or configuration for more details.</p>"},{"location":"voxedit/Controls/","title":"Controls","text":"<p>There are different schemas available to pick from:</p> <ul> <li>Blender</li> <li>Magicavoxel</li> <li>Qubicle</li> <li>Vengi</li> </ul> <p>See the binding editor in the menu bar to get a complete list of bindings or switch between the keymaps.</p> <p>You can also manually edit the <code>keybindings-x.cfg</code> file in your user settings directory. Go to About -&gt; Paths and click the first entry. This will open your user settings directory for voxedit. The file is there if you at least once quit the application.</p> <p>You can also change the bindings in the console by using the <code>bind</code> command.</p> <p>Usage of the bind command: <code>bind &lt;modifier+key&gt; &lt;command&gt; &lt;context&gt;</code>. <code>context</code> is one of <code>all</code>, <code>model</code>, <code>scene</code>, <code>editing</code> (<code>editing</code> is both <code>scene</code> and <code>model</code>)</p> <p>To get a list of bindable commands, type the <code>cmdlist</code> command to the console and hit enter.</p>"},{"location":"voxedit/Features/","title":"Features","text":"<p>A few of the features are:</p> <ul> <li>Layer and key frame animation support</li> <li>Viewport screenshots and AVI video recording</li> <li>Customizable UI</li> <li>Multiple viewports to view the model from all sides while editing it</li> <li>Multi monitor support</li> <li>LUA scripting api and built-in editor</li> <li>Undo/Redo</li> <li>Network mode</li> <li>Copy/Cut/Paste - paste to cursor or reference position</li> <li>Layer and scene graph support</li> <li>Custom color palettes with sorting and several color reduction algorithms</li> <li>Custom key bindings</li> <li>Import images as heightmaps, palettes or planes</li> <li>Import meshes and voxelize them - see supported formats</li> <li>Import whole folders of single models into one scene</li> <li>Exporting single models or whole scenes into meshes and a lot of other formats</li> <li>Voxelize true type font text</li> <li>Procedurally generated content like trees and a L-System integration</li> <li>Generate level of details (LOD) volumes</li> <li>Cropping volumes</li> <li>Online asset browsing for voxel repositories</li> <li>Presentation mode for e.g. kitbashing sets</li> <li>Several editing brushes are available</li> <li>Not only voxels but also named points are supported as scene graph nodes - for e.g. defining positions for characters to hold an item.</li> <li>Calculating normals for voxels (non-hollow models) is supported, too. This is useful for some games like Command &amp; Conquer.</li> <li>View modes for animation, Command &amp; Conquer, Ace Of Spades or simple voxel editing</li> </ul> <p>There are a lot more features to explore and this list is definitely not complete.</p>"},{"location":"voxedit/Index/","title":"About","text":"<p>This is a free and opensource, cross platform voxel volume editor with scripting and animation support.</p> <p>You can load and save a lot of different voxel formats. Its built around 256 color palettes.</p> <p>The voxel editor is under development - if you are a developer or voxel artist, please consider contributing.</p>"},{"location":"voxedit/Index/#videos","title":"Videos","text":""},{"location":"voxedit/Index/#requirements","title":"Requirements","text":"<ul> <li>OpenGL 3.2</li> </ul>"},{"location":"voxedit/Index/#further-reading","title":"Further reading","text":"<ul> <li>Features</li> <li>Usage</li> <li>Configuration</li> <li>Controls</li> <li>Screenshots</li> <li>Supported voxel formats</li> <li>Scripting support</li> <li>Palettes</li> </ul>"},{"location":"voxedit/Screenshots/","title":"Screenshots","text":""},{"location":"voxedit/Usage/","title":"Usage","text":""},{"location":"voxedit/Usage/#scene-and-edit-mode","title":"Scene and edit mode","text":"<p>The scene mode is for animating and moving objects in the world - while the edit mode is for modifying voxels in there volumes.</p> <p>You can toggle between those modes by pressing the <code>TAB</code> key in the default binding mode. See controls.</p>"},{"location":"voxedit/Usage/#reference-position","title":"Reference position","text":"<p>The current reference position is rendered as a blue dot in the scene (in edit mode) and is used to e.g. define the position of where to put procedurally generated content like the trees. It is also used to define the position of where to paste your clipboard at. But also some modifier are using the reference position.</p> <p>The reference position can be set by pressing enter while hovering a particular voxel - or by using the command <code>setreferenceposition</code> - see controls.</p>"},{"location":"voxedit/Usage/#brushes","title":"Brushes","text":""},{"location":"voxedit/Usage/#shape-brush","title":"Shape brush","text":"<p>You can use several shapes to create voxels via spanning a bounding box in the viewport volume by pressing and holding the left mouse button.</p>"},{"location":"voxedit/Usage/#script-brush","title":"Script brush","text":"<p>Execute scripts with this brush.</p>"},{"location":"voxedit/Usage/#plane-brush","title":"Plane brush","text":"<p>This allows you to extrude a whole plane.</p>"},{"location":"voxedit/Usage/#stamp-brush","title":"Stamp brush","text":"<p>Load stamps in form of other voxel assets via drag and drop or right click in the asset panel</p>"},{"location":"voxedit/Usage/#line-brush","title":"Line brush","text":"<p>Generate a line from the reference position to the current cursor position</p>"},{"location":"voxedit/Usage/#path-brush","title":"Path brush","text":"<p>Generate a path from the reference position to the current cursor position by walking over existing voxels</p>"},{"location":"voxedit/Usage/#modifiers","title":"Modifiers","text":"<p>The available brushes support several modifiers.</p>"},{"location":"voxedit/Usage/#place","title":"Place","text":"<p>Place new voxels in your volume.</p>"},{"location":"voxedit/Usage/#erase","title":"Erase","text":"<p>Erase voxels from your volume. There is a shortcut when you are in the other modes to delete voxels: Press the right mouse button (at least in the default binding).</p>"},{"location":"voxedit/Usage/#override","title":"Override","text":"<p>Override existing voxels with a new color - but also place new voxels.</p>"},{"location":"voxedit/Usage/#paint","title":"Paint","text":"<p>Other than override this modifier only changes the color of existing voxels.</p>"},{"location":"voxedit/Usage/#path","title":"Path","text":"<p>This modifier puts voxels onto a path using the reference position as start and the position you clicked at as end. This needs solid voxels to work on. This doesn't work in empty volumes.</p>"},{"location":"voxedit/Usage/#line","title":"Line","text":"<p>A line will just draw a line from the reference position to the position you clicked at. See the bindings window (Edit / Bindings) for the binding to place the reference position in the scene (the blue dot).</p>"},{"location":"voxedit/Usage/#color-picker","title":"Color picker","text":"<p>You can either use it from the modifiers panel or by default with the key <code>p</code> to pick the color from the current selected voxel.</p>"},{"location":"voxedit/Usage/#select","title":"Select","text":"<p>Span an selection box to operate in. Either for copy/pasting or to limit a certain action (like the script execution). Don't forget to unselect (Select -&gt; Select none) before being able to operate on the whole volume again.</p>"},{"location":"voxedit/Usage/#asset","title":"Asset","text":"<p>This is an online and local asset browser for supported formats from gitlab, github, custom urls and apis</p>"},{"location":"voxedit/Usage/#camera","title":"Camera","text":"<p>Allow you to create camera nodes and modify the current camera values</p>"},{"location":"voxedit/Usage/#console","title":"Console","text":"<p>See the console logs. Also see the configuration docs for changing the log level</p>"},{"location":"voxedit/Usage/#lsystem","title":"LSystem","text":"<p>Generate l-system voxel data</p>"},{"location":"voxedit/Usage/#memento","title":"Memento","text":"<p>Visualizes the undo/redo states</p>"},{"location":"voxedit/Usage/#node-inspector","title":"Node Inspector","text":"<p>The node inspector in edit mode can change the size and the position of the voxel volume. Usually you don't want to modify the position of the volume in edit mode, but in scene mode. See below.</p> <p></p> <p>The node inspector in scene mode allows one to change the transforms of the scene graph node. You can rotate, scale and move the node in the world to arrange your objects in your scene.</p>"},{"location":"voxedit/Usage/#palette","title":"Palette","text":"<p>The palette panel visualized the colors for a node. The colors can get re-ordered and changed, as well as drag-and-dropped to change the slots. See the dedicated palette docs for more details.</p> <p>You can re-order the palette colors by Hue, Saturation, Brightness or CIELab rules.</p> <p>Direct LoSpec palette import is possible and next to LoSpec you can import or export a lot other palette formats, too.</p>"},{"location":"voxedit/Usage/#renderer","title":"Renderer","text":"<p>VoxEdit has built-in support for the yocto pathtracer - see material docs for details.</p> <p>You can configure the pathtracer options here.</p>"},{"location":"voxedit/Usage/#scene-view","title":"Scene View","text":"<p>Here you can see all the nodes and their hierarchy in the scene. You can change the parents by using drag and drop and use a actions from the context menu for each nodes.</p> <p>You can hide or show nodes from the viewport or lock them to execute some actions on all locked nodes at the same time.</p> <p>It's also possible to use the play button to loop through all nodes in your scene. Make sure to check out the <code>Model animation speed</code> in the options menu to change the animation speed.</p> <p>Next to these options you can create new nodes - e.g. model or group nodes here.</p>"},{"location":"voxedit/Usage/#scripts","title":"Scripts","text":"<p>Here you can execute the lua scripts in the editor to modify your scene or the current active volume (depends on the script).</p> <p>The arguments given in the script are visualized here. This allows you to extend the script panel with your own fields to execute the scripts.</p>"},{"location":"voxedit/Usage/#animations","title":"Animations","text":"<p>Here you can change or create or delete animations from a scene.</p> <p></p> <p>The timeline visualized the key frames for each node for each animation.</p>"},{"location":"voxedit/Usage/#tools","title":"Tools","text":"<p>The scene and the edit mode have different tools for you. You can resize, crop, flip or rotate voxels in edit mode or duplicate, center pivot, align or delete nodes in scene mode.</p>"},{"location":"voxedit/Usage/#tree","title":"Tree","text":"<p>Here you can generate a lot of different tree types - all with their own set of configuration options.</p>"},{"location":"voxedit/Usage/#viewport","title":"Viewport","text":"<p>The viewport can get changed to scene and edit mode. You can switch the cameras from orthogonal to projection, you can record videos of your scene or let the camera automatically rotate.</p>"},{"location":"voxedit/Usage/#view-modes","title":"View modes","text":"<p>There are several view modes available - most of them will change the layout and/or options that are available in the ui. There is e.g. a Command &amp; Conquer mode where you can manage the normals that are part of the vxl.</p> <p>Artists that only want to edit voxels without animating them might use the simple layout to get a less complex ui.</p>"},{"location":"voxedit/Usage/#network","title":"Network","text":"<p>You can start a server to allow others to work on the same scene with you. Head over to the network panel in vengi-voxedit and start a server. Pick the proper interface to bind on. This is usually <code>0.0.0.0</code> if you want to have it opened globally. Make sure to open the specified port in your firewall/router. Now clients can connect.</p>"}]}