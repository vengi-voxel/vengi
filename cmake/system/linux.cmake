include(CheckFunctionExists)
include(CheckLibraryExists)
include(CheckCCompilerFlag)
include(CheckCXXCompilerFlag)
include(CheckIncludeFiles)

set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
find_package(Threads)

if (CMAKE_COMPILER_IS_GNUCXX)
	check_function_exists(__atomic_fetch_add_4 HAVE___ATOMIC_FETCH_ADD_4)
	if (NOT HAVE___ATOMIC_FETCH_ADD_4)
		check_library_exists(atomic __atomic_fetch_add_4 "" HAVE_LIBATOMIC)
		if (HAVE_LIBATOMIC)
			set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -latomic")
		endif()
	endif()
endif()

check_library_exists(m pow "" HAVE_LIBM)
if(HAVE_LIBM)
	set(CMAKE_REQUIRED_LIBRARIES m)
	foreach(_FN
		atan atan2 ceil copysign cos cosf fabs floor log pow scalbn sin
		sinf sqrt sqrtf tan tanf acos asin)
		string(TOUPPER ${_FN} _UPPER)
		set(_HAVEVAR "HAVE_${_UPPER}")
		check_function_exists("${_FN}" ${_HAVEVAR})
	endforeach()
	set(CMAKE_REQUIRED_LIBRARIES)
	set(CMAKE_C_STANDARD_LIBRARIES "${CMAKE_C_STANDARD_LIBRARIES} -lm")
endif()

#set(CMAKE_C_STANDARD_LIBRARIES "${CMAKE_C_STANDARD_LIBRARIES} ${CMAKE_DL_LIBS}")

check_include_files("execinfo.h" HAVE_EXECINFO_H)
check_include_files("sys/resource.h" HAVE_SYS_RESOURCE_H)
check_include_files("sys/time.h" HAVE_SYS_TIME_H)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions -fno-rtti")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wcast-align -Wpointer-arith -Wshadow -Wall -Wextra -Wreturn-type -Wwrite-strings -Wno-unused-parameter -D_GNU_SOURCE -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -D_FORTIFY_SOURCE=2")

if (${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "x86_64")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=x86-64 -mtune=generic")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -march=x86-64 -mtune=generic")
endif()

foreach(_FLAG
	-Wreturn-type -Wwrite-strings -Wno-unused-parameter -fdiagnostics-color=auto -ftime-trace -Wno-cast-align)
	string(REPLACE "=" "_" _NAME ${_FLAG})
	string(REPLACE "-" "_" _NAME ${_NAME})
	check_c_compiler_flag(${_FLAG} HAVE_FLAG${_NAME})
	if (HAVE_FLAG${_NAME})
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${_FLAG}")
	endif()
endforeach()
if (CMAKE_USE_PTHREADS_INIT)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pthread")
endif()

foreach(_FLAG
	-fexpensive-optimizations -fomit-frame-pointer)
	string(REPLACE "=" "_" _NAME ${_FLAG})
	string(REPLACE "-" "_" _NAME ${_NAME})
	check_c_compiler_flag(${_FLAG} HAVE_FLAG${_NAME})
	if (HAVE_FLAG${_NAME})
		set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${_FLAG}")
	endif()
endforeach()

foreach(_FLAG
	-fno-omit-frame-pointer)
	string(REPLACE "=" "_" _NAME ${_FLAG})
	string(REPLACE "-" "_" _NAME ${_NAME})
	check_c_compiler_flag(${_FLAG} HAVE_FLAG${_NAME})
	if (HAVE_FLAG${_NAME})
		set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${_FLAG}")
	endif()
endforeach()
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g -DDEBUG")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O3 -DNDEBUG")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELEASE}")
if (USE_SANITIZERS)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address -fsanitize=undefined")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fsanitize=undefined")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address -fsanitize=undefined")
endif()
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_C_FLAGS_DEBUG} -fstack-protector-strong -fno-omit-frame-pointer")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_LINKER_FLAGS_DEBUG} -fno-omit-frame-pointer ${SANITIZE_FLAGS}")

find_program(DESKTOP_FILE_VALIDATE_EXECUTABLE desktop-file-validate)

check_cxx_compiler_flag("-Wthread-safety" HAVE_THREAD_SAFETY_CHECKS)
if (HAVE_THREAD_SAFETY_CHECKS)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wthread-safety")
endif()
check_cxx_compiler_flag("-fdiagnostics-parseable-fixits" CXX_COMPILER_SUPPORTS_FIXITS)
if (CXX_COMPILER_SUPPORTS_FIXITS)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdiagnostics-parseable-fixits")
endif()
check_c_compiler_flag("-fdiagnostics-parseable-fixits" C_COMPILER_SUPPORTS_FIXITS)
if (C_COMPILER_SUPPORTS_FIXITS)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fdiagnostics-parseable-fixits")
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__STDC_FORMAT_MACROS")

check_c_compiler_flag("-fexpensive-optimizations" HAVE_EXPENSIVE_OPTIMIZATIONS)
unset(CMAKE_REQUIRED_FLAGS)

if (USE_CCACHE)
	find_program(CCACHE "ccache")
	if (CCACHE)
		message(STATUS "Using ccache")
		set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE})
		set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE})
		#set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ${CCACHE})
		#set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE})
		if (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
			set(ENV{CCACHE_CPP2} "yes")
			add_compile_options(-Qunused-arguments)
		endif()
	endif()
endif()
