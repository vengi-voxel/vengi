
#-------------------------------------------------------------------------------
#   Macros for generating google unit tests.
#-------------------------------------------------------------------------------

set(GOOGLETESTDIR ${CMAKE_CURRENT_LIST_DIR})

find_package(GTest)
#include(GoogleTest)

#-------------------------------------------------------------------------------
#   gtest_suite_begin(name)
#   Begin defining a unit test suite.
#
function(gtest_suite_begin name)
	if (UNITTESTS)
		set(options NO_TEMPLATE)
		set(oneValueArgs TEMPLATE)
		set(multiValueArgs)
		cmake_parse_arguments(${name} "${options}" "${oneValueArgs}" "" ${ARGN})

		if (${name}_UNPARSED_ARGUMENTS)
			message(FATAL_ERROR "gtest_suite_begin(): called with invalid args '${${name}_UNPARSED_ARGUMENTS}'")
		endif()
		set_property(GLOBAL PROPERTY ${name}_Sources "")
		set_property(GLOBAL PROPERTY ${name}_Files "")
		set_property(GLOBAL PROPERTY ${name}_LUAFiles "")
		set_property(GLOBAL PROPERTY ${name}_Deps "")
		set_property(GLOBAL PROPERTY ${name}_EXECUTABLE True)
		set_property(GLOBAL PROPERTY ${name}_INSTALL False)

		if (NOT ${name}_NO_TEMPLATE)
			set(main_path ${CMAKE_CURRENT_BINARY_DIR}/${name}_main.cpp)
			if (${name}_TEMPLATE)
				configure_file(${${name}_TEMPLATE} ${main_path})
			else()
				configure_file(${GOOGLETESTDIR}/main.cpp.in ${main_path})
			endif()
			add_executable(${name} ${main_path})
		else()
			add_executable(${name})
		endif()

		# add googletest lib dependency
		if (GTEST_FOUND)
			target_include_directories(${name} PRIVATE ${GTEST_INCLUDE_DIRS})
			target_link_libraries(${name} ${GTEST_LIBRARIES})
		endif()
	endif()
endfunction()

function(gtest_suite_sources name)
	if (UNITTESTS)
		set(ARG_LIST ${ARGV})
		list(REMOVE_AT ARG_LIST 0)
		get_property(list GLOBAL PROPERTY ${name}_Sources)
		foreach(entry ${ARG_LIST})
			list(APPEND list ${CMAKE_CURRENT_SOURCE_DIR}/${entry})
		endforeach()
		set_property(GLOBAL PROPERTY ${name}_Sources ${list})
	endif()
endfunction()

function(gtest_suite_files name)
	if (UNITTESTS)
		set(ARG_LIST ${ARGV})
		list(REMOVE_AT ARG_LIST 0)
		get_property(list GLOBAL PROPERTY ${name}_Files)
		foreach(entry ${ARG_LIST})
			list(APPEND list ${entry})
		endforeach()
		set_property(GLOBAL PROPERTY ${name}_Files ${list})
	endif()
endfunction()

function(gtest_suite_lua_sources name)
	if (UNITTESTS)
		set(ARG_LIST ${ARGV})
		list(REMOVE_AT ARG_LIST 0)
		get_property(list GLOBAL PROPERTY ${name}_LUAFiles)
		foreach(entry ${ARG_LIST})
			list(APPEND list ${entry})
		endforeach()
		set_property(GLOBAL PROPERTY ${name}_LUAFiles ${list})
	endif()
endfunction()

function(gtest_suite_deps name)
	if (UNITTESTS)
		set(ARG_LIST ${ARGV})
		list(REMOVE_AT ARG_LIST 0)
		get_property(list GLOBAL PROPERTY ${name}_Deps)
		list(APPEND list ${ARG_LIST})
		list(REMOVE_DUPLICATES list)
		set_property(GLOBAL PROPERTY ${name}_Deps ${list})
	endif()
endfunction()

function(gtest_suite_end name)
	if (UNITTESTS)
		project(${name})
		get_property(srcs GLOBAL PROPERTY ${name}_Sources)
		get_property(deps GLOBAL PROPERTY ${name}_Deps)
		target_sources(${name} PRIVATE ${srcs})
		set_target_properties(${name} PROPERTIES OUTPUT_NAME "${CMAKE_PROJECT_NAME}-${name}")
		set_target_properties(${name} PROPERTIES
			ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${name}"
			LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${name}"
			RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${name}"
		)
		foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
			string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
			set_target_properties(${name} PROPERTIES
				ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_BINARY_DIR}/${name}"
				LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_BINARY_DIR}/${name}"
				RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_BINARY_DIR}/${name}"
			)
		endforeach()

		target_compile_options(${name} PRIVATE $<$<CXX_COMPILER_ID:GNU>:-Wno-undef>)

		get_property(files GLOBAL PROPERTY ${name}_Files)
		foreach (datafile ${files})
			string(REGEX REPLACE "^[^/]+" "" target_datafile "${datafile}")
			string(LENGTH ${target_datafile} target_datafile_length)
			string(SUBSTRING ${target_datafile} 1 ${target_datafile_length} target_datafile)
			get_filename_component(datafiledir ${target_datafile} DIRECTORY)
			get_filename_component(filename ${target_datafile} NAME)
			configure_file(${DATA_DIR}/${datafile} ${CMAKE_BINARY_DIR}/${name}/${datafiledir}/${filename} COPYONLY)
		endforeach()

		get_property(luafiles GLOBAL PROPERTY ${name}_LUAFiles)
		foreach (luafile ${luafiles})
			get_filename_component(luafiledir ${luafile} DIRECTORY)
			get_filename_component(filename ${luafile} NAME)
			configure_file(lua/${luafile} ${CMAKE_BINARY_DIR}/${name}/${luafiledir}/${filename} COPYONLY)
		endforeach()

		list(APPEND deps gtest)
		list(REMOVE_DUPLICATES deps)
		engine_target_link_libraries(TARGET ${name} DEPENDENCIES ${deps})
		set(GTEST_PCH "<gtest/gtest.h>")
		target_precompile_headers(${name} PRIVATE ${GTEST_PCH})
		set_target_properties(${name} PROPERTIES FOLDER ${name})
		set(_gtest_working_dir "${CMAKE_BINARY_DIR}/${name}")
		add_test(NAME ${name} COMMAND $<TARGET_FILE:${name}> --gtest_output=xml:${CMAKE_BINARY_DIR}/${name}.xml WORKING_DIRECTORY "${_gtest_working_dir}")

		set(_use_lsan_env OFF)
		if (USE_SANITIZERS AND LINUX)
			set(_lsan_suppressions "${ROOT_DIR}/cmake/sanitizers/linux-lsan.supp")
			if (EXISTS ${_lsan_suppressions})
				set(_lsan_env "LSAN_OPTIONS=suppressions=${_lsan_suppressions}:print_suppressions=0")
				set(_use_lsan_env ON)
				set_property(TEST ${name} APPEND PROPERTY ENVIRONMENT "${_lsan_env}")
			endif()
		endif()

		if (_use_lsan_env)
			add_custom_target(${name}-run COMMAND ${CMAKE_COMMAND} -E env "${_lsan_env}" $<TARGET_FILE:${name}> --gtest_output=xml:${CMAKE_BINARY_DIR}/${name}.xml DEPENDS ${name} USES_TERMINAL WORKING_DIRECTORY "${_gtest_working_dir}")
		else()
			add_custom_target(${name}-run COMMAND $<TARGET_FILE:${name}> --gtest_output=xml:${CMAKE_BINARY_DIR}/${name}.xml DEPENDS ${name} USES_TERMINAL WORKING_DIRECTORY "${_gtest_working_dir}")
		endif()

		#gtest_add_tests(${name} "" AUTO)
		#gtest_discover_tests(${name})
		if (EMSCRIPTEN)
			configure_file(${ROOT_DIR}/contrib/installer/emscripten/console.html.in ${CMAKE_CURRENT_BINARY_DIR}/index.html @ONLY)
			set_target_properties(${name} PROPERTIES SUFFIX ".html")
			set_target_properties(${name} PROPERTIES LINK_FLAGS "--shell-file ${CMAKE_CURRENT_BINARY_DIR}/index.html")
		endif()

		engine_add_debuggger(${name})
		engine_add_valgrind(${name})
		engine_add_perf(${name})
		engine_add_heaptrack(${name})
		unset(_lsan_env)
		unset(_lsan_suppressions)
		unset(_use_lsan_env)
	endif()
endfunction()
